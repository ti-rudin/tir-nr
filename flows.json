[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "some",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e18c38da.82ab78",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "38c422f8.b82bf6",
        "type": "tab",
        "label": "useback",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5df15275.2888ec",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "89dcb365.f1eba",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "13f2257b.01983b",
            "a445188a.34a218",
            "71acd437.96b3dc",
            "18fc789.fac9d87",
            "79163972.5bdbe8",
            "a9b8fcea.cf55d",
            "e34cab2c.f35798",
            "e545caa6.7236c8",
            "623691b3.5a4c",
            "d010274c.5b8918",
            "23a461b5.8934de",
            "34642144.ae139e"
        ],
        "x": 74,
        "y": 859,
        "w": 1562,
        "h": 202
    },
    {
        "id": "c0b0e6b5.5e71f",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "12960d0b.36ef23",
            "3e18acb8.6ea274",
            "90df249b.c0cbf"
        ],
        "x": 2154,
        "y": 619,
        "w": 392,
        "h": 202
    },
    {
        "id": "339f6357.48270c",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "503437af.280cc8",
            "8deed84b.3c9898",
            "d4a5db44.14dd68",
            "1cce308b.ed6fef",
            "4a9286e5.e8f4e8",
            "29caead0.b6b606",
            "2c379b0e.e23f04",
            "7ecd73a6.b4458c",
            "5ad83996.397588",
            "3c339a4d.3cb876",
            "7e0a8361.60fa3c",
            "e7c33b5d.af48d8",
            "89105352.909da",
            "ed38b6eb.ce69b",
            "3df007b7.771648"
        ],
        "x": 74,
        "y": 379,
        "w": 2192,
        "h": 202
    },
    {
        "id": "6d0bae3e.4983b8",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7792f18e.f49f5",
            "4d01ab16.cd9554",
            "e68822f4.50329",
            "d42587f0.33b758",
            "eb102c0d.9fc26",
            "da9e4dd8.dda28",
            "536d19d6.716798",
            "9d731fd4.ec333",
            "ab453ff0.f0607",
            "e72704f9.38636",
            "2e2d6018.33d4f8",
            "cf8e2d12.ded23",
            "1b14a050.631f9",
            "1692a27.8368fde",
            "cc1a6775.26469",
            "83eb55cb.4546",
            "8e1f3271.c24088"
        ],
        "x": 74,
        "y": 619,
        "w": 2022,
        "h": 202
    },
    {
        "id": "3a58fc05.972e0c",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "79227fcb.dc9d18",
            "9a3b7f9.5e6b8",
            "e7bf2df8.cfa0a",
            "81f7b446.8c8718",
            "4cbecb3c.bf7ee4",
            "ef77d89b.b36608"
        ],
        "x": 1094,
        "y": 59,
        "w": 592,
        "h": 122
    },
    {
        "id": "c4471f11.5e9398",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "168e0396.d38efc",
            "c971a180.2a71c8",
            "f13d409b.6445f8",
            "76409bc.077dee4"
        ],
        "x": 1134,
        "y": 1639,
        "w": 392,
        "h": 122
    },
    {
        "id": "205eec04.74c0d4",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "78ca5c87.8628d4",
            "ac559e43.94903",
            "160b4dd4.4f8e12",
            "61b59ea7.10c3a",
            "550838d7.0c4118",
            "89848e2c.9b815",
            "f369c890.c7bf58",
            "e7b2e93a.d772a8",
            "99328f1c.3a173",
            "d9c2af4e.ac296",
            "6efa7034.90b4e",
            "b3a83312.3848e",
            "ce43fd6d.7b213",
            "10907153.2feab7",
            "2bde6947.f7ecae",
            "27dbb0df.4fa588",
            "4377a687.40ea08",
            "dc26dcc0.bdbe6",
            "64ef31ed.e495e8",
            "34f31521.2b27d2",
            "5e6d0362.224584",
            "230838f7.7d169",
            "415a64d7.94e364",
            "63a1b9e8.5ea0a",
            "650ece50.fb118",
            "e7d6b6d2.32065"
        ],
        "x": 74,
        "y": 1079,
        "w": 3362,
        "h": 242
    },
    {
        "id": "945a2cf3.e1d6b8",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4bec0d5b.469514",
            "5f90666a.62c228",
            "52aaa619.191ba8",
            "2fe76646.8b5a0a",
            "5a6c84db.e2549c",
            "f29872c6.957f88",
            "41a863d8.9f125c",
            "abce4774.171ad8",
            "7e390ec5.73031",
            "1c21e572.487e03",
            "4dd8ae72.bac7a8",
            "645bd981.f21eb",
            "cfa961f2.56de9",
            "a9c4dd18.15e2d8",
            "93e330da.07ba58",
            "7a1798ac.2961e",
            "cecfe42a.4e6e6",
            "73a29c92.5b5454",
            "cedee7.bd3d7118",
            "829d56ef.f0827"
        ],
        "x": 74,
        "y": 39,
        "w": 832,
        "h": 302
    },
    {
        "id": "3e767551.3d299a",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "133c3e4a.687a62",
            "a7ef7b74.1301e8",
            "9f82a757.25f3d"
        ],
        "x": 2334,
        "y": 1099,
        "w": 372,
        "h": 202
    },
    {
        "id": "bc481bc2.f1ae08",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ee8ada7.9818bc",
            "e0440623.2ec6e",
            "cba3e711.97d4a8",
            "c23f0bc3.badbc",
            "6eb4d4b9.112f6c",
            "b0b01bc4.45a1e8",
            "a359f524.2e00e8",
            "cf20b67b.cbc6e",
            "a0142b1a.f25d9",
            "941fc9d2.76b05",
            "8040b017.7a26f8",
            "189b2b68.7c485d",
            "842e37da.0d09"
        ],
        "x": 2194,
        "y": 1399,
        "w": 1112,
        "h": 262
    },
    {
        "id": "8fac538c.5d4a48",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c3e2eace.6fef4",
            "f88e6307.876b78",
            "3e3a1491.e31a74",
            "fb84e297.7e169",
            "8275986.8fc5d68",
            "97442da1.47403",
            "c0dcb78d.280fb",
            "da741b09.f3974",
            "3201780f.c931f",
            "d43a0074.4523c",
            "d6651eda.7b83",
            "dfa11988.0cfa6",
            "9a76b6bf.1016d",
            "fe2a6027.b22b48",
            "4bd2ed9.fa5d114",
            "a790f90b.998d8",
            "b080e3fb.60616",
            "bec7265d.ad8278",
            "cec096cd.d93358",
            "be118eed.3c8348",
            "5bbb44fa.ec4574"
        ],
        "x": 34,
        "y": 1079,
        "w": 2092,
        "h": 222
    },
    {
        "id": "c2109678.33bc38",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "754f373f.b15518",
            "444e001d.21432",
            "5d94f71d.d3668",
            "edea6dff.e44",
            "1e4c98d9.ba7367",
            "c982d578.5cca4",
            "90d93514.efa9e8",
            "24812b74.9bc644",
            "54724e9d.5a21d8",
            "5beb39ef.f84b7",
            "a707b53d.3343e",
            "2ac45d8.4ea1022",
            "fe43ccbb.7a083",
            "8f2b992a.2a5888",
            "3d3d989e.3a00f",
            "a2a98d92.7d7ac8",
            "2ffac69a.1af06a",
            "b72aec1b.3ff6d",
            "36be307e.92e14",
            "f00f32f3.dec218"
        ],
        "x": 34,
        "y": 819,
        "w": 2832,
        "h": 202
    },
    {
        "id": "5b21035.9c9f6fc",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fe0a5fc8.c442f",
            "50d2f56d.d89b5c",
            "24e3759c.ccab7a",
            "493967b2.355f88",
            "a77ec084.8fffe",
            "81b674e0.619348",
            "c192b5ce.f292e8",
            "f5e48d6b.8af42",
            "9c3f6550.f65078",
            "534028b7.335048",
            "d3e6b44f.196458",
            "ac588a65.521198",
            "496429d7.3e65b8",
            "daa3ab85.3e3f08",
            "839251af.05aeb"
        ],
        "x": 3454,
        "y": 39,
        "w": 692,
        "h": 442
    },
    {
        "id": "74a41043.26c49",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eda0b98c.624f38",
            "dda68ce4.be4548",
            "33a98cf6.520fbc",
            "cd451268.3a6058",
            "14fd3fa0.82928",
            "7cd3ed75.b496ac"
        ],
        "x": 114,
        "y": 1659,
        "w": 592,
        "h": 122
    },
    {
        "id": "f120eab2.0a60a8",
        "type": "redis-config",
        "name": "redis:6379",
        "options": "redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "acbee441.8c1e1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a328c3be.7f91c8",
        "type": "ui_group",
        "name": "BTC",
        "tab": "acbee441.8c1e1",
        "order": 1,
        "disp": false,
        "width": "14",
        "collapse": false
    },
    {
        "id": "7eefe30b.94c464",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "261e447.e94ad3c",
        "type": "ui_group",
        "name": "g2",
        "tab": "acbee441.8c1e1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ab190c2e.90269",
        "type": "graphql-server",
        "endpoint": "http://strapi:1337/graphql",
        "name": ""
    },
    {
        "id": "848f142.6165868",
        "type": "telegrambot-config",
        "botname": "Tibot",
        "usernames": "",
        "chatIds": "454883204",
        "pollInterval": "300"
    },
    {
        "id": "92272f91.20a43",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "af92df2f.3032e"
            ]
        ]
    },
    {
        "id": "64da113d.24a75",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/auth/local",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "85bb8b78.ac90e"
            ]
        ]
    },
    {
        "id": "af92df2f.3032e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "set payload and headers",
        "func": "\nmsg.payload = {\"identifier\":\"rudin\",\"password\":\"visorTi31\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "64da113d.24a75"
            ]
        ]
    },
    {
        "id": "31ab53be.5111dc",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 60,
        "wires": []
    },
    {
        "id": "85bb8b78.ac90e",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 60,
        "wires": [
            [
                "31ab53be.5111dc",
                "37ae0815.cdce4"
            ]
        ]
    },
    {
        "id": "c51cbf73.d90738",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "topic": "test",
        "qos": "2",
        "datatype": "auto",
        "broker": "",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "7781c73.639b8b8"
            ]
        ]
    },
    {
        "id": "7008d6ef.b6ee38",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "topic": "test",
        "qos": "2",
        "retain": "",
        "broker": "",
        "x": 310,
        "y": 200,
        "wires": []
    },
    {
        "id": "ef5b970c.7c864",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "33",
        "payloadType": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "7008d6ef.b6ee38"
            ]
        ]
    },
    {
        "id": "7781c73.639b8b8",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 650,
        "y": 200,
        "wires": []
    },
    {
        "id": "455ac72c.e4e59",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "docker run -itd --network iot --name mybroker eclipse-mosquitto",
        "info": "docker network create iot \ndocker run -itd --network iot --name mybroker eclipse-mosquitto",
        "x": 390,
        "y": 260,
        "wires": []
    },
    {
        "id": "762df59.9853b8c",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "strapi auth",
        "info": "",
        "x": 120,
        "y": 100,
        "wires": []
    },
    {
        "id": "4088fb43.ac4cc4",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "3be36704.285d48"
            ]
        ]
    },
    {
        "id": "3be36704.285d48",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "e2f7f4e0.c336e"
            ]
        ]
    },
    {
        "id": "e2f7f4e0.c336e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 380,
        "wires": []
    },
    {
        "id": "1545968.e1c906a",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4250,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f7720481.a6b768",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4830,
        "y": 1820,
        "wires": []
    },
    {
        "id": "c8d58e7e.1e7bd",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4300,
        "y": 1820,
        "wires": [
            [
                "e317dfb9.7d7d6"
            ]
        ]
    },
    {
        "id": "ac083a6a.9f5fb8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4310,
        "y": 1780,
        "wires": [
            [
                "e317dfb9.7d7d6"
            ]
        ]
    },
    {
        "id": "436e7966.32db48",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4300,
        "y": 1880,
        "wires": [
            [
                "5ddd1f18.80ccb"
            ]
        ]
    },
    {
        "id": "6947d8f0.801bc8",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4810,
        "y": 1880,
        "wires": []
    },
    {
        "id": "fcc4fbad.ddd958",
        "type": "catch",
        "z": "e18c38da.82ab78",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1000,
        "y": 460,
        "wires": [
            [
                "1936271a.516719"
            ]
        ]
    },
    {
        "id": "1936271a.516719",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1150,
        "y": 460,
        "wires": []
    },
    {
        "id": "cac53ba2.730bf8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"key\",\"value\"]",
        "payloadType": "json",
        "x": 4300,
        "y": 1940,
        "wires": [
            [
                "2edf9cf.3bc1064",
                "858eec9b.c706b"
            ]
        ]
    },
    {
        "id": "858eec9b.c706b",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4810,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d8fab639.e93688",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[\"value\"]",
        "payloadType": "json",
        "x": 4310,
        "y": 2000,
        "wires": [
            [
                "4195201e.7c0c2"
            ]
        ]
    },
    {
        "id": "1cc32d0c.3d2c23",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4810,
        "y": 2000,
        "wires": []
    },
    {
        "id": "b0f97501.fe7a08",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "myHash",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4330,
        "y": 2120,
        "wires": [
            [
                "2cedf9d2.7b13f6"
            ]
        ]
    },
    {
        "id": "e3d6a8ff.a0fd68",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4810,
        "y": 2120,
        "wires": []
    },
    {
        "id": "37aea6c9.caf68a",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 4290,
        "y": 2180,
        "wires": [
            [
                "7e3816a4.30a3e8"
            ]
        ]
    },
    {
        "id": "1841c999.5b1966",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4810,
        "y": 2180,
        "wires": []
    },
    {
        "id": "da8feb7a.117ed8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3590,
        "y": 2240,
        "wires": [
            [
                "434c360e.228778"
            ]
        ]
    },
    {
        "id": "9f711677.ee0268",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4110,
        "y": 2240,
        "wires": []
    },
    {
        "id": "b9db9bc4.92afd8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "botname",
                "v": "payload.botname",
                "vt": "msg"
            },
            {
                "p": "start",
                "v": "",
                "vt": "date"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "botlist:d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payload": "{}",
        "payloadType": "json",
        "x": 176,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "cdf56fc8.88d7d",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4300,
        "y": 2360,
        "wires": [
            [
                "90058663.4f0bd8"
            ]
        ]
    },
    {
        "id": "2bc51ced.3ff1f4",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4830,
        "y": 2360,
        "wires": []
    },
    {
        "id": "7e0a5330.f69bac",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3590,
        "y": 2300,
        "wires": [
            [
                "23fd40d3.acb38"
            ]
        ]
    },
    {
        "id": "349f6ec3.6b7852",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4110,
        "y": 2300,
        "wires": []
    },
    {
        "id": "cd0e6fa6.c019a",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4300,
        "y": 2420,
        "wires": [
            [
                "3db5b456.716e3c"
            ]
        ]
    },
    {
        "id": "89688cf4.1cf64",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4830,
        "y": 2420,
        "wires": []
    },
    {
        "id": "2c0c2179.bcb1ee",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4830,
        "y": 1600,
        "wires": []
    },
    {
        "id": "58e730d0.10957",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4830,
        "y": 1660,
        "wires": []
    },
    {
        "id": "1a45847f.7c2afc",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4230,
        "y": 1680,
        "wires": [
            [
                "7de99e6d.248ca"
            ]
        ]
    },
    {
        "id": "8aad4370.49b93",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[]",
        "payloadType": "json",
        "x": 4290,
        "y": 2480,
        "wires": [
            [
                "2702ea82.368396"
            ]
        ]
    },
    {
        "id": "51de21f9.91dfa",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4830,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b7f83a18.236328",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4280,
        "y": 2580,
        "wires": [
            [
                "fb5f6142.dddcb"
            ]
        ]
    },
    {
        "id": "fb5f6142.dddcb",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "let redis = context.flow.get('redis');\n\nredis.info().then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})\n\n\nredis.call(\"anycmd\").then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4510,
        "y": 2580,
        "wires": [
            [
                "efc1f70e.2e9938"
            ]
        ]
    },
    {
        "id": "efc1f70e.2e9938",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4830,
        "y": 2580,
        "wires": []
    },
    {
        "id": "29cbd2ee.db14ee",
        "type": "trigger",
        "z": "e18c38da.82ab78",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 226,
        "y": 520,
        "wires": [
            [
                "ee0b50b4.bf43e"
            ]
        ]
    },
    {
        "id": "8b629a9b.465648",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "Получаем список ботов пользователя",
        "info": "Получаем список ботов пользователя",
        "x": 380,
        "y": 78,
        "wires": []
    },
    {
        "id": "d02ce6e5.3bd2d8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 356,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "955b159c.952dc8",
        "type": "split",
        "z": "e18c38da.82ab78",
        "name": "split",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 273,
        "y": 119,
        "wires": [
            [
                "28ba88d6.966048"
            ]
        ]
    },
    {
        "id": "d73e3124.bc835",
        "type": "json",
        "z": "e18c38da.82ab78",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 276,
        "y": 200,
        "wires": [
            [
                "955b159c.952dc8"
            ]
        ]
    },
    {
        "id": "28ba88d6.966048",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "name +\"-settings\";",
        "func": "var a = msg.payload[1]+\"-settings\";\nvar ttpprefix = msg.payload[1]+\":ttp\";\n//node.warn(a);\n//node.send(msg,false);\nmsg.botname =  msg.payload[1];\nmsg.ttpprefix = ttpprefix;\n\nmsg.payload = [];\nmsg.topic = a;\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 693,
        "y": 119,
        "wires": [
            [
                "4fb041e4.85159"
            ],
            []
        ]
    },
    {
        "id": "96e0f4d3.3184d8",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "для каждого бота - получение данных",
        "info": "",
        "x": 763,
        "y": 78,
        "wires": []
    },
    {
        "id": "527ca317.06788c",
        "type": "json",
        "z": "e18c38da.82ab78",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 653,
        "y": 239,
        "wires": [
            [
                "fbdfe1cc.2a3bb"
            ]
        ]
    },
    {
        "id": "fbdfe1cc.2a3bb",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "let moneta = msg.payload.quotacoin + msg.payload.basecoin;\nmsg.topic = \"prices:\"+moneta;\nmsg.moneta = moneta;\nmsg.digitq =  msg.payload.digitq;\nmsg.digitprice =  msg.payload.digitprice;\nmsg.minprice =  msg.payload.minprice;\nmsg.ofsetbottom =  msg.payload.ofsetbottom;\nmsg.ofsettop =  msg.payload.ofsettop;\nmsg.minpriceforzakup =  msg.payload.minpriceforzakup;\n\nmsg.payload = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 299,
        "wires": [
            [
                "a462101b.ddaa4"
            ]
        ]
    },
    {
        "id": "b6bddfd2.4946",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.price = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":busy\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 419,
        "wires": [
            [
                "3db6985f.950708"
            ]
        ]
    },
    {
        "id": "599dcfa5.d3fd7",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.busy = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curorderid\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 539,
        "wires": [
            [
                "dc3e7170.4deaa"
            ]
        ]
    },
    {
        "id": "601527cc.0da2c8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.curorderid = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curstop\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 659,
        "wires": [
            [
                "fb628e8e.97a9e"
            ]
        ]
    },
    {
        "id": "e91cd8e4.ed5b68",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.curstop = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":issell\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 779,
        "wires": [
            [
                "c030a5a4.ddc4e8"
            ]
        ]
    },
    {
        "id": "39efc222.4d67be",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.issell = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":quantity\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 899,
        "wires": [
            [
                "720f2b18.2e51b4"
            ]
        ]
    },
    {
        "id": "15f5c4bd.141afb",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.quantity = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 663,
        "y": 1019,
        "wires": [
            [
                "7c03c838.7624f8"
            ]
        ]
    },
    {
        "id": "7c03c838.7624f8",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "quantity check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "110e8c64.659ec4"
            ],
            [
                "bc2329c.3bacbd8"
            ]
        ]
    },
    {
        "id": "24b5069b.61c8da",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "ttp pilot",
        "info": "",
        "x": 970,
        "y": 201,
        "wires": []
    },
    {
        "id": "e3131777.68d7f8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "замер времени",
        "func": "\nmsg.est = new Date() - msg.start - 1000;\n//node.warn(msg.est);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1660,
        "y": 2060,
        "wires": [
            [
                "23e1f5c3.d4d8ca"
            ]
        ]
    },
    {
        "id": "cb505a1a.20ffd8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "Вычисление raschstopprice",
        "func": "msg.curstop = Number(msg.curstop);\nmsg.raschstopprice = Number((msg.price - msg.price / 100 * msg.ofsettop).toFixed(msg.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1660,
        "y": 121,
        "wires": [
            [
                "470f90df.5283b"
            ]
        ]
    },
    {
        "id": "470f90df.5283b",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "если raschstopprice > curstop",
        "property": "msg.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "curstop",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "curstop",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 121,
        "wires": [
            [
                "fbec8182.cd1b6"
            ],
            [
                "6e3ce36c.5c768c"
            ]
        ]
    },
    {
        "id": "d482103.2213cf",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "запускаем ТТП / передвигаем ордер",
        "info": "",
        "x": 2293,
        "y": 81,
        "wires": []
    },
    {
        "id": "8da90b90.4f95d8",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "слушаем статус ордера",
        "info": "",
        "x": 2256,
        "y": 600,
        "wires": []
    },
    {
        "id": "d6f54eac.51539",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "payload": "",
        "payloadType": "date",
        "x": 4390,
        "y": 1040,
        "wires": [
            [
                "62d49473.af24fc"
            ]
        ]
    },
    {
        "id": "62d49473.af24fc",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "Context based routing",
        "property": "state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 4600,
        "y": 1040,
        "wires": [
            [
                "2d9d7f34.4c624"
            ],
            [
                "a1035bdc.f42b08"
            ],
            [
                "d154304.092dcd"
            ]
        ]
    },
    {
        "id": "2d9d7f34.4c624",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "Output 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4820,
        "y": 980,
        "wires": []
    },
    {
        "id": "a1035bdc.f42b08",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "Output 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4820,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d154304.092dcd",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "Output 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4820,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5786e5f7.c9cf5c",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "Set state 0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 4400,
        "y": 1120,
        "wires": [
            [
                "da262cf6.d8e1f"
            ]
        ]
    },
    {
        "id": "8622b7b9.dc5568",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "Set state 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 4400,
        "y": 1160,
        "wires": [
            [
                "da262cf6.d8e1f"
            ]
        ]
    },
    {
        "id": "d6da540f.260308",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "Set state 2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 4400,
        "y": 1240,
        "wires": [
            [
                "da262cf6.d8e1f"
            ]
        ]
    },
    {
        "id": "77a5ac4f.4329b4",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "Set state 3",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 4400,
        "y": 1280,
        "wires": [
            [
                "da262cf6.d8e1f"
            ]
        ]
    },
    {
        "id": "da262cf6.d8e1f",
        "type": "change",
        "z": "e18c38da.82ab78",
        "name": "Set flow.state",
        "rules": [
            {
                "t": "set",
                "p": "state",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4620,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "7a2fa3af.debc1c",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "Started!",
        "payloadType": "str",
        "x": 1940,
        "y": 2060,
        "wires": [
            [
                "b0b30a21.c4f7b8"
            ]
        ]
    },
    {
        "id": "b0b30a21.c4f7b8",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 2060,
        "wires": []
    },
    {
        "id": "e1b15f04.5ef47",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "start timer",
        "func": "msg.start = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 2060,
        "wires": [
            [
                "1a234b23.ce38d5"
            ]
        ]
    },
    {
        "id": "2609222a.0e9bae",
        "type": "trigger",
        "z": "e18c38da.82ab78",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 660,
        "y": 2120,
        "wires": [
            [
                "e1b15f04.5ef47"
            ]
        ]
    },
    {
        "id": "c49cc406.851928",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 2140,
        "wires": [
            [
                "2609222a.0e9bae"
            ]
        ]
    },
    {
        "id": "d23e1261.84cc5",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1300,
        "y": 2100,
        "wires": [
            [
                "773763b2.06730c",
                "658c7c0.bf19a84"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b84003b.42367",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2120,
        "wires": []
    },
    {
        "id": "658c7c0.bf19a84",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\nbinance.cancel(moneta, orderid, function (error, response) {\n                if (error) {\n                    var errorMsg = parseApiError(error);\n\t\t            node.error(errorMsg);\n\t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t            \treturn;\n\n                }\n                if (response) {\n                    \n                    node.send(msg);\n                }\n            });\n            \n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 2060,
        "wires": [
            [
                "e3131777.68d7f8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "8d0fe702.193ce8",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "moneta",
                "v": "TRXUSDT",
                "vt": "str"
            },
            {
                "p": "payload.price",
                "v": "0.022",
                "vt": "str"
            },
            {
                "p": "payload.stopprice",
                "v": "0.025",
                "vt": "str"
            },
            {
                "p": "payload.quantity",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 2060,
        "wires": [
            [
                "2609222a.0e9bae"
            ]
        ]
    },
    {
        "id": "1a234b23.ce38d5",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet moneta = msg.moneta;\nlet price = parseFloat(msg.payload.price);\nlet priceb = price;\nlet stopprice = parseFloat(msg.payload.stopprice);\nlet quantity = parseFloat(msg.payload.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            return;\n          }\n          node.status({}); //clear status message\n          msg.orderid = resp.orderId;\n          node.send(msg);\n        });\n\n\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 2060,
        "wires": [
            [
                "b84003b.42367",
                "b5aaaa45.56f138"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b5aaaa45.56f138",
        "type": "delay",
        "z": "e18c38da.82ab78",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1160,
        "y": 2060,
        "wires": [
            [
                "658c7c0.bf19a84"
            ]
        ]
    },
    {
        "id": "773763b2.06730c",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 2140,
        "wires": []
    },
    {
        "id": "23e1f5c3.d4d8ca",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "est",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2120,
        "wires": []
    },
    {
        "id": "29d84efa.f40d82",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "curorderid > 0 check",
        "property": "curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2433,
        "y": 115,
        "wires": [
            [
                "fce253ed.baf93"
            ],
            [
                "e02fb2fe.f03b3"
            ]
        ]
    },
    {
        "id": "fce253ed.baf93",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            node.send(msg);\n          return;\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n                        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n          }\n          //node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n    \n    \n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2669,
        "y": 109,
        "wires": [
            [
                "6f29699c.7d8cd8",
                "1f25bcea.390523",
                "f6b19fb0.a1624"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "10f90f8c.75f76",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "стартуем ттп",
        "info": "",
        "x": 2659,
        "y": 75,
        "wires": []
    },
    {
        "id": "2ecf8586.7a904a",
        "type": "comment",
        "z": "e18c38da.82ab78",
        "name": "Передвигаем ордер",
        "info": "",
        "x": 2689,
        "y": 276,
        "wires": []
    },
    {
        "id": "d9d135cf.f57068",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "Let Free!",
        "func": "\nmsg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3400,
        "y": 109,
        "wires": [
            [
                "54b4fc44.e47f74"
            ]
        ]
    },
    {
        "id": "e02fb2fe.f03b3",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.curorderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\n    binance.cancel(moneta, orderid, function (error, response) {\n                    if (error) {\n                        var errorMsg = parseApiError(error);\n                        errorMsg = errorMsg + \":\" + orderid;\n    \t\t            node.error(errorMsg);\n    \t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    \t            \tnode.send(msg);\n    \t            \treturn;\n    \n                    }\n                    if (response) {\n                        \n                        node.send(msg);\n                        return;\n                    }\n                });\n\n            \n//msg.payload = \"qjson.status\";\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2659,
        "y": 310,
        "wires": [
            [
                "81dcf2d7.1d002",
                "f6b19fb0.a1624",
                "3e469775.4f8288"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6f29699c.7d8cd8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2869,
        "y": 109,
        "wires": [
            [
                "a139deac.acf0d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1f25bcea.390523",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2870,
        "y": 156,
        "wires": [
            [
                "42f0d139.ff43e"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "f5b655c4.bf17c8",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3970,
        "y": 169,
        "wires": []
    },
    {
        "id": "81dcf2d7.1d002",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n          }\n          node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2849,
        "y": 310,
        "wires": [
            [
                "2e7fba73.8c9c26",
                "7992df6a.5d562"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2e7fba73.8c9c26",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3069,
        "y": 310,
        "wires": [
            [
                "f4244b00.a987b8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "7992df6a.5d562",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3069,
        "y": 270,
        "wires": [
            [
                "e306772e.1ae1f8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "168d1083.aa2fcf",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "",
        "property": "st",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "FILLED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2453,
        "y": 641,
        "wires": [
            [
                "c0f6d1b1.5db1b"
            ],
            []
        ]
    },
    {
        "id": "9c148319.45527",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "reset order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2570,
        "y": 2220,
        "wires": [
            [
                "6cd2f554.83779c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "593e3188.2e6ff",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "reset curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2570,
        "y": 2180,
        "wires": [
            [
                "6e928d4.e6b8374"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "c0f6d1b1.5db1b",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "prepare issel 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":issell\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2623,
        "y": 634,
        "wires": [
            [
                "74ab7c83.1a99f4"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ee0b50b4.bf43e",
        "type": "delay",
        "z": "e18c38da.82ab78",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 436,
        "y": 520,
        "wires": [
            [
                "18b1c58a.00662a"
            ]
        ]
    },
    {
        "id": "f6b19fb0.a1624",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 420,
        "wires": []
    },
    {
        "id": "81129d1b.e1736",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3760,
        "y": 109,
        "wires": [
            [
                "fa1247c5.56f6f8",
                "f5b655c4.bf17c8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "3e469775.4f8288",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "prepare order id 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2859,
        "y": 356,
        "wires": [
            [
                "512acfd.1f8453"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "77bfd09a.602d9",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "busy check",
        "property": "busy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1239,
        "y": 127,
        "wires": [
            [
                "8f6d2b6c.90e3b8"
            ],
            []
        ]
    },
    {
        "id": "5a5f06f0.f83fe8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "prepare busy 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2223,
        "y": 241,
        "wires": [
            [
                "55c98839.0c0cd8",
                "4bd02dbc.b43ad4"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "738808f8.c97bc8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = \"8200370\";\nlet moneta =  \"LINKDOWNUSDT\";\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2580,
        "y": 2060,
        "wires": [
            [
                "70ff2ab2.df6164"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "70ff2ab2.df6164",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "st",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2780,
        "y": 2060,
        "wires": []
    },
    {
        "id": "369e8c6c.9cc074",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2370,
        "y": 2060,
        "wires": [
            [
                "738808f8.c97bc8"
            ]
        ]
    },
    {
        "id": "bc2329c.3bacbd8",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "Let Free!",
        "func": "msg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "f9c57665.84cb98"
            ]
        ]
    },
    {
        "id": "f9c57665.84cb98",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1400,
        "y": 340,
        "wires": [
            [
                "c0b869fc.08dad8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "8f6d2b6c.90e3b8",
        "type": "delay",
        "z": "e18c38da.82ab78",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1410,
        "y": 121,
        "wires": [
            [
                "cb505a1a.20ffd8"
            ]
        ]
    },
    {
        "id": "54b4fc44.e47f74",
        "type": "delay",
        "z": "e18c38da.82ab78",
        "name": "",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3570,
        "y": 109,
        "wires": [
            [
                "81129d1b.e1736"
            ]
        ]
    },
    {
        "id": "6e3ce36c.5c768c",
        "type": "delay",
        "z": "e18c38da.82ab78",
        "name": "",
        "pauseType": "delay",
        "timeout": "400",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2033,
        "y": 641,
        "wires": [
            [
                "448c4acd.cfe9f4"
            ]
        ]
    },
    {
        "id": "fbec8182.cd1b6",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "Let Busy!",
        "func": "msg.busy = \"1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2204,
        "y": 115,
        "wires": [
            [
                "5a5f06f0.f83fe8",
                "29d84efa.f40d82"
            ]
        ]
    },
    {
        "id": "4bd02dbc.b43ad4",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 200,
        "wires": []
    },
    {
        "id": "290bb66.560de4a",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 1740,
        "wires": [
            [
                "9d0eb1a8.fef8f"
            ]
        ]
    },
    {
        "id": "9d0eb1a8.fef8f",
        "type": "rbe",
        "z": "e18c38da.82ab78",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1880,
        "y": 1760,
        "wires": [
            [
                "e0629700.194518"
            ]
        ]
    },
    {
        "id": "e0629700.194518",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 2090,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d5a4ad51.bbc46",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 1780,
        "wires": [
            [
                "9d0eb1a8.fef8f"
            ]
        ]
    },
    {
        "id": "f7a2cd84.d2372",
        "type": "rbe",
        "z": "e18c38da.82ab78",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1890,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "448c4acd.cfe9f4",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "let orderid = msg.curorderid;\nlet moneta = msg.moneta;\nlet userid = msg.userid;\n\n\nmsg.topic = \"orders-status-\" + userid + \":\" + moneta +\":\"+orderid;\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2130,
        "y": 960,
        "wires": [
            [
                "672e33a8.9aac8c"
            ]
        ]
    },
    {
        "id": "d21fd3e3.a956c",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2690,
        "y": 960,
        "wires": []
    },
    {
        "id": "813ef7b.3c97408",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "curorderid",
                "v": "2274007",
                "vt": "str"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            },
            {
                "p": "moneta",
                "v": "SUNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1940,
        "y": 960,
        "wires": [
            [
                "448c4acd.cfe9f4"
            ]
        ]
    },
    {
        "id": "28a625e6.2c42ca",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "msg.st = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2520,
        "y": 870,
        "wires": [
            [
                "d21fd3e3.a956c",
                "168d1083.aa2fcf"
            ]
        ]
    },
    {
        "id": "110e8c64.659ec4",
        "type": "switch",
        "z": "e18c38da.82ab78",
        "name": "check issel",
        "property": "issell",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "77bfd09a.602d9"
            ]
        ]
    },
    {
        "id": "f9995380.6a345",
        "type": "http in",
        "z": "e18c38da.82ab78",
        "name": "",
        "url": "/panic",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 1200,
        "wires": [
            [
                "f2605435.fd9ee8"
            ]
        ]
    },
    {
        "id": "f2605435.fd9ee8",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7a460ce4.03d714",
        "type": "http in",
        "z": "e18c38da.82ab78",
        "name": "",
        "url": "/webhook-tv",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 610,
        "y": 1180,
        "wires": [
            [
                "3f59012b.f2ab4e"
            ]
        ]
    },
    {
        "id": "d0865ab1.700678",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3f59012b.f2ab4e",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "\nif (msg.payload.command == \"START\"){\nmsg.payload = [msg.payload.bot+\"-start\", \"1\"];\nmsg.topic = \"\";}\n\nif (msg.payload.command == \"PANICSALE\"){\nmsg.payload = [msg.payload.bot+\"-panicsale\", \"1\"];\nmsg.topic = \"\";}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 1080,
        "wires": [
            [
                "d0865ab1.700678",
                "a59ad694.e65af8"
            ]
        ]
    },
    {
        "id": "b8f0523.8db09b",
        "type": "inject",
        "z": "e18c38da.82ab78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "f8d62ead.8e7df",
        "type": "function",
        "z": "e18c38da.82ab78",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1870,
        "y": 40,
        "wires": [
            [
                "4402256f.72ecbc"
            ]
        ]
    },
    {
        "id": "4402256f.72ecbc",
        "type": "debug",
        "z": "e18c38da.82ab78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 40,
        "wires": []
    },
    {
        "id": "7a3a1aa4.768354",
        "type": "redis-in",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "blpop",
        "name": "",
        "topic": "test",
        "obj": false,
        "timeout": 0,
        "x": 4590,
        "y": 1820,
        "wires": [
            [
                "f7720481.a6b768"
            ]
        ]
    },
    {
        "id": "1910babb.d3e735",
        "type": "redis-in",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "TOPIC:*",
        "obj": false,
        "timeout": 0,
        "x": 4600,
        "y": 1600,
        "wires": [
            [
                "2c0c2179.bcb1ee"
            ]
        ]
    },
    {
        "id": "135fb04d.73026",
        "type": "redis-in",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": false,
        "timeout": 0,
        "x": 4600,
        "y": 1660,
        "wires": [
            [
                "58e730d0.10957"
            ]
        ]
    },
    {
        "id": "e317dfb9.7d7d6",
        "type": "redis-out",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "test",
        "obj": true,
        "x": 4590,
        "y": 1780,
        "wires": []
    },
    {
        "id": "7de99e6d.248ca",
        "type": "redis-out",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": true,
        "x": 4410,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5ddd1f18.80ccb",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "timestamp",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4570,
        "y": 1880,
        "wires": [
            [
                "6947d8f0.801bc8"
            ]
        ]
    },
    {
        "id": "2edf9cf.3bc1064",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 1960,
        "wires": [
            [
                "858eec9b.c706b"
            ]
        ]
    },
    {
        "id": "4195201e.7c0c2",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4530,
        "y": 2000,
        "wires": [
            [
                "1cc32d0c.3d2c23"
            ]
        ]
    },
    {
        "id": "2cedf9d2.7b13f6",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4530,
        "y": 2120,
        "wires": [
            [
                "e3d6a8ff.a0fd68"
            ]
        ]
    },
    {
        "id": "7e3816a4.30a3e8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "myHash",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4560,
        "y": 2180,
        "wires": [
            [
                "1841c999.5b1966"
            ]
        ]
    },
    {
        "id": "434c360e.228778",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\",\"memberB\",\"memberC\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3850,
        "y": 2240,
        "wires": [
            [
                "9f711677.ee0268"
            ]
        ]
    },
    {
        "id": "18b1c58a.00662a",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get mybots",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 296,
        "y": 280,
        "wires": [
            [
                "d73e3124.bc835"
            ]
        ]
    },
    {
        "id": "23fd40d3.acb38",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "sismember",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3870,
        "y": 2300,
        "wires": [
            [
                "349f6ec3.6b7852"
            ]
        ]
    },
    {
        "id": "2702ea82.368396",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "del",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4520,
        "y": 2480,
        "wires": [
            [
                "51de21f9.91dfa"
            ]
        ]
    },
    {
        "id": "4fb041e4.85159",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 683,
        "y": 179,
        "wires": [
            [
                "527ca317.06788c"
            ]
        ]
    },
    {
        "id": "a462101b.ddaa4",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get currentprice",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 683,
        "y": 359,
        "wires": [
            [
                "b6bddfd2.4946"
            ]
        ]
    },
    {
        "id": "3db6985f.950708",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:busy",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 673,
        "y": 479,
        "wires": [
            [
                "599dcfa5.d3fd7"
            ]
        ]
    },
    {
        "id": "dc3e7170.4deaa",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curorderid",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 693,
        "y": 599,
        "wires": [
            [
                "601527cc.0da2c8"
            ]
        ]
    },
    {
        "id": "fb628e8e.97a9e",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curstop",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 683,
        "y": 719,
        "wires": [
            [
                "e91cd8e4.ed5b68"
            ]
        ]
    },
    {
        "id": "c030a5a4.ddc4e8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:issell",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 673,
        "y": 839,
        "wires": [
            [
                "39efc222.4d67be"
            ]
        ]
    },
    {
        "id": "720f2b18.2e51b4",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:quantity",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 683,
        "y": 959,
        "wires": [
            [
                "15f5c4bd.141afb"
            ]
        ]
    },
    {
        "id": "a139deac.acf0d",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3052,
        "y": 109,
        "wires": [
            [
                "d9d135cf.f57068"
            ]
        ]
    },
    {
        "id": "42f0d139.ff43e",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3043,
        "y": 156,
        "wires": [
            []
        ]
    },
    {
        "id": "f4244b00.a987b8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3252,
        "y": 310,
        "wires": [
            [
                "d9d135cf.f57068"
            ]
        ]
    },
    {
        "id": "e306772e.1ae1f8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3242,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "6e928d4.e6b8374",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2810,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "6cd2f554.83779c",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2820,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "74ab7c83.1a99f4",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set issell 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2813,
        "y": 634,
        "wires": [
            []
        ]
    },
    {
        "id": "fa1247c5.56f6f8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3950,
        "y": 109,
        "wires": [
            []
        ]
    },
    {
        "id": "512acfd.1f8453",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3089,
        "y": 356,
        "wires": [
            []
        ]
    },
    {
        "id": "55c98839.0c0cd8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2413,
        "y": 241,
        "wires": [
            []
        ]
    },
    {
        "id": "c0b869fc.08dad8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1570,
        "y": 341,
        "wires": [
            []
        ]
    },
    {
        "id": "672e33a8.9aac8c",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2300,
        "y": 960,
        "wires": [
            [
                "28a625e6.2c42ca"
            ]
        ]
    },
    {
        "id": "a59ad694.e65af8",
        "type": "redis-command",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set comand",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1190,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "90058663.4f0bd8",
        "type": "redis-lua-script",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "name": "test",
        "keyval": 0,
        "func": "local text = \"Hello World\"\nreturn text",
        "stored": true,
        "block": false,
        "x": 4510,
        "y": 2360,
        "wires": [
            [
                "2bc51ced.3ff1f4"
            ]
        ]
    },
    {
        "id": "3db5b456.716e3c",
        "type": "redis-lua-script",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "name": "test2",
        "keyval": 0,
        "func": "local text = \"Hello2222 World2222\"\nreturn text",
        "stored": false,
        "block": false,
        "x": 4510,
        "y": 2420,
        "wires": [
            [
                "89688cf4.1cf64"
            ]
        ]
    },
    {
        "id": "edcbe86d.8402b8",
        "type": "redis-instance",
        "z": "e18c38da.82ab78",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 4530,
        "y": 1500,
        "wires": []
    },
    {
        "id": "37ae0815.cdce4",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "jwt",
        "func": "msg.payload = msg.payload.jwt\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 120,
        "wires": [
            [
                "12620d98.2652da"
            ]
        ]
    },
    {
        "id": "12620d98.2652da",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "a57899a0.4df728",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 940,
        "wires": []
    },
    {
        "id": "59bcdd00.78cb3c",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "255c42b3.497f56"
            ]
        ]
    },
    {
        "id": "886cce0f.31bf4",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "test get order status if orderid >0",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nnode.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = 202496790;\nlet moneta = \"NEOUSDT\";\n//node.warn(binance);\nif ((orderid !== \"0\") && (orderid !== \"\") ){\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    \tnode.send(msg);\n    \treturn;\n\t}\n\tif (qjson) {\n    msg.st = qjson.status;\n    \tnode.send(msg);\n\treturn;\n\t\t\n\t}\n\t\n\n});} else {\n    node.send(msg);\n    \treturn;\n}\n\n//msg.payload = \"qjson.status\";\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 740,
        "wires": [
            [
                "c4bcee8f.9596d"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "c4bcee8f.9596d",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 740,
        "wires": []
    },
    {
        "id": "7b1b600a.e038a8",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "886cce0f.31bf4"
            ]
        ]
    },
    {
        "id": "e643fdce.88e468",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "reset curstop",
        "func": "\nmsg.payload = [];\n\nmsg.topic = \"prices:BTCUSDT\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 920,
        "wires": [
            [
                "24ee19d3.41338e"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "24ee19d3.41338e",
        "type": "redis-command",
        "z": "f6f2187d.f17ca8",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price BTC",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 820,
        "y": 920,
        "wires": [
            [
                "9d0cb5dc.7a8208"
            ]
        ]
    },
    {
        "id": "91ddd844.b5521",
        "type": "rbe",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "a57899a0.4df728",
                "2b2d08a9.178968",
                "e94170b6.6f1f3"
            ]
        ]
    },
    {
        "id": "255c42b3.497f56",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "e643fdce.88e468"
            ]
        ]
    },
    {
        "id": "2b2d08a9.178968",
        "type": "ui_chart",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "group": "a328c3be.7f91c8",
        "order": 0,
        "width": "14",
        "height": "4",
        "label": "chart1",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1190,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e94170b6.6f1f3",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "group": "a328c3be.7f91c8",
        "order": 1,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1200,
        "y": 800,
        "wires": []
    },
    {
        "id": "a359a762.3ae7f",
        "type": "ui_slider",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "label": "slider",
        "tooltip": "",
        "group": "261e447.e94ad3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 910,
        "y": 580,
        "wires": [
            [
                "509efc94.ce5e94",
                "3ef48e15.dbe8b2"
            ]
        ]
    },
    {
        "id": "50b12ab3.f5a354",
        "type": "ui_slider",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "label": "slider2",
        "tooltip": "",
        "group": "261e447.e94ad3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "3",
        "max": "102",
        "step": 1,
        "x": 980,
        "y": 480,
        "wires": [
            [
                "1682b6d8.a7a011"
            ]
        ]
    },
    {
        "id": "1682b6d8.a7a011",
        "type": "ui_template",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "group": "261e447.e94ad3c",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1220,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "509efc94.ce5e94",
        "type": "ui_template",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "group": "261e447.e94ad3c",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1220,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "a3b46350.9724b8",
        "type": "ui_switch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "261e447.e94ad3c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 390,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "21b51fad.056a2",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "bd1170e9.5c5ec",
        "type": "ui_button",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 6,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "l",
        "payloadType": "str",
        "topic": "",
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "99ca3af1.001c8",
                "80782c46.ee0f5"
            ]
        ]
    },
    {
        "id": "99ca3af1.001c8",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 380,
        "wires": []
    },
    {
        "id": "9fe26f73.708c1",
        "type": "graphql",
        "z": "f6f2187d.f17ca8",
        "name": "gql",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "mutation {\n  login(input: { identifier: \"rudin\", password: \"visorTi31\" }) {\n    jwt\n  }\n}",
        "x": 910,
        "y": 1140,
        "wires": [
            [
                "5d3269f3.f8b6d"
            ],
            [
                "a624da2a.b8b678"
            ]
        ]
    },
    {
        "id": "120ce4ff.bf1a03",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "jwt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1134,
        "wires": []
    },
    {
        "id": "a624da2a.b8b678",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1194,
        "wires": []
    },
    {
        "id": "953ac252.56dfb8",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 747,
        "y": 1140,
        "wires": [
            [
                "9fe26f73.708c1"
            ]
        ]
    },
    {
        "id": "5d3269f3.f8b6d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.payload = msg.payload.login.jwt\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1134,
        "wires": [
            [
                "120ce4ff.bf1a03"
            ]
        ]
    },
    {
        "id": "5a1ec565.15862c",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "авторизация GRAPHQL",
        "info": "",
        "x": 1050,
        "y": 1080,
        "wires": []
    },
    {
        "id": "fe0c60eb.1bda2",
        "type": "graphql",
        "z": "f6f2187d.f17ca8",
        "name": "список ботов",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bots{\n  botname\n  onoff\n  }\n}",
        "x": 940,
        "y": 1380,
        "wires": [
            [
                "137f8d53.6e63e3"
            ],
            [
                "4f01e054.8511b"
            ]
        ]
    },
    {
        "id": "4f01e054.8511b",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1380,
        "wires": []
    },
    {
        "id": "43338377.b3569c",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 1380,
        "wires": [
            [
                "fe0c60eb.1bda2"
            ]
        ]
    },
    {
        "id": "c022085c.aa0718",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "неавторизованный curl get запрос",
        "info": "чтобы сделать авторизованным добавить в хеадер авторизейшн берриар [token]",
        "x": 640,
        "y": 1660,
        "wires": []
    },
    {
        "id": "137f8d53.6e63e3",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "41f3389d.a183c8",
        "type": "exec",
        "z": "f6f2187d.f17ca8",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 1600,
        "wires": [
            [
                "44c8b5db.3be3b4"
            ],
            [],
            []
        ]
    },
    {
        "id": "69d75e45.61edb8",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "curl -X GET \"http://strapi:1337/bots\" -H \"accept: application/json\" ",
        "payloadType": "str",
        "x": 450,
        "y": 1600,
        "wires": [
            [
                "41f3389d.a183c8"
            ]
        ]
    },
    {
        "id": "a2425ffd.5cb3e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1600,
        "wires": []
    },
    {
        "id": "44c8b5db.3be3b4",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 790,
        "y": 1600,
        "wires": [
            [
                "91ff91f8.41d7a",
                "9555b87a.2adcd"
            ]
        ]
    },
    {
        "id": "91ff91f8.41d7a",
        "type": "split",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 1600,
        "wires": [
            [
                "f5d0974.8e9b4e8"
            ]
        ]
    },
    {
        "id": "f5d0974.8e9b4e8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.payload = msg.payload.botname;\nmsg.data = msg.payload.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 1600,
        "wires": [
            [
                "a2425ffd.5cb3e"
            ]
        ]
    },
    {
        "id": "a81ffc26.e31dc",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1800,
        "wires": []
    },
    {
        "id": "9555b87a.2adcd",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\n\nmsg.payload = msg.payload.map(function(name) {\n  return name.botname;\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 1700,
        "wires": [
            [
                "a81ffc26.e31dc",
                "9f3336ec.db62c8"
            ]
        ]
    },
    {
        "id": "c02c60b5.cffc3",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "неавторизованный graphql запрос",
        "info": "",
        "x": 980,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9f3336ec.db62c8",
        "type": "split",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1260,
        "y": 1720,
        "wires": [
            [
                "3b434aea.f18656"
            ]
        ]
    },
    {
        "id": "426555cf.88e214",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/bots",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 610,
        "y": 1920,
        "wires": [
            [
                "16fd731.998070d"
            ]
        ]
    },
    {
        "id": "16fd731.998070d",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1920,
        "wires": []
    },
    {
        "id": "366ea88a.378768",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 1920,
        "wires": [
            [
                "426555cf.88e214"
            ]
        ]
    },
    {
        "id": "ee676f50.ab2978",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "неавторизованный get запрос",
        "info": "",
        "x": 570,
        "y": 1860,
        "wires": []
    },
    {
        "id": "7129e443.e39394",
        "type": "graphql",
        "z": "f6f2187d.f17ca8",
        "name": "botsCount",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  botsCount\n}",
        "x": 930,
        "y": 1480,
        "wires": [
            [
                "e2a0cacb.ff9cd"
            ],
            [
                "98bb52b.07cda3"
            ]
        ]
    },
    {
        "id": "98bb52b.07cda3",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1460,
        "wires": []
    },
    {
        "id": "88895b43.9d326",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 747,
        "y": 1480,
        "wires": [
            [
                "7129e443.e39394"
            ]
        ]
    },
    {
        "id": "e2a0cacb.ff9cd",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1460,
        "wires": []
    },
    {
        "id": "80782c46.ee0f5",
        "type": "exec",
        "z": "f6f2187d.f17ca8",
        "command": "reboot",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1360,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9d0cb5dc.7a8208",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nmsg.payload = Math.floor(msg.payload * 1000)/1000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 840,
        "wires": [
            [
                "91ddd844.b5521"
            ]
        ]
    },
    {
        "id": "27bea910.483f66",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "okr",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 640,
        "wires": []
    },
    {
        "id": "3ef48e15.dbe8b2",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.okr = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "27bea910.483f66"
            ]
        ]
    },
    {
        "id": "3b434aea.f18656",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1720,
        "wires": []
    },
    {
        "id": "7792f18e.f49f5",
        "type": "graphql",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "gql запрос списка ботов",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bots{\n  onoff\n  id\n  busy\n  }\n}",
        "x": 910,
        "y": 720,
        "wires": [
            [
                "4d01ab16.cd9554"
            ],
            []
        ]
    },
    {
        "id": "4d01ab16.cd9554",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "payload = payload.bots",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.payload = msg.payload.bots;\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 720,
        "wires": [
            [
                "e68822f4.50329"
            ]
        ]
    },
    {
        "id": "e68822f4.50329",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1370,
        "y": 720,
        "wires": [
            [
                "d42587f0.33b758"
            ]
        ]
    },
    {
        "id": "d42587f0.33b758",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "onoff === true,  busy === false ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n\n\nif (msg.payload.onoff === true) {\n\n    if (msg.payload.busy === false) {\n        msg.payload = msg.payload.id;\n        \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle+\"-norm\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n        return [msg, null];\n    }\n\n    else {\n\n        let id = msg.payload.id;\n        msg.payload = [];\n\n\n        var count = flow.get(id) || 0;\n        count += 1;\n\n        if (count > 12) {\n        \n            let newsetb = { \"busy\": false };\n\n            msg.payload = newsetb;\n\n            msg.headers = {};\n            msg.headers['accept'] = 'application/json';\n            msg.headers['Content-Type'] = 'application/json';\n            \n            const upd = global.get('updateSettings')(msg.payload, id);\n\n            upd.then(upd => {\n                //>трекер>\n                    let end_node_time = Date.parse(new Date()) / 1000;\n                    let duration = end_node_time - start_node_time;\n                    track.push({\n                        \"steptitle\": steptitle+\"-12\",\n                        \"start_node_time\": start_node_time,\n                        \"end_node_time\": end_node_time,\n                        \"duration\": duration\n                    });\n                    flow.set(\"track\", track);\n                //>трекер>\n                node.status({fill:\"red\",shape:\"dot\"});\n                \n                node.warn(\"reset busy:\" + id);\n\n            }).catch(error => {\n                //>трекер>\n                    let end_node_time = Date.parse(new Date()) / 1000;\n                    let duration = end_node_time - start_node_time;\n                    track.push({\n                        \"steptitle\": steptitle+\"-error update\",\n                        \"start_node_time\": start_node_time,\n                        \"end_node_time\": end_node_time,\n                        \"duration\": duration\n                    });\n                    flow.set(\"track\", track);\n                //>трекер>\n                node.status({fill:\"red\",shape:\"dot\"});\n                \n                node.error(error);\n            });\n\n        }\n\n        flow.set(id, count);\n        return [null, msg];\n\n    }\n}\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1590,
        "y": 720,
        "wires": [
            [
                "536d19d6.716798"
            ],
            [
                "ab453ff0.f0607"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "eb102c0d.9fc26",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "Старт трека",
        "info": "",
        "x": 170,
        "y": 660,
        "wires": []
    },
    {
        "id": "da9e4dd8.dda28",
        "type": "trigger",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 720,
        "wires": [
            [
                "8e1f3271.c24088"
            ]
        ]
    },
    {
        "id": "4845bd6.8cefd44",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\n\nprice.then(price => {\n    node.warn(price);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3900,
        "y": 220,
        "wires": []
    },
    {
        "id": "5142b2ba.bc73cc",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "get BTCUSDT price",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3670,
        "y": 220,
        "wires": [
            [
                "4845bd6.8cefd44"
            ]
        ]
    },
    {
        "id": "3e86454.fcee4ba",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4060,
        "y": 280,
        "wires": []
    },
    {
        "id": "c7d746b7.9446c8",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "get 5fa1973ff1fb3f005e206671 busy status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 3740,
        "y": 280,
        "wires": [
            [
                "3e86454.fcee4ba"
            ]
        ]
    },
    {
        "id": "ad28bc2a.8bf1a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "setBusyStatus()",
        "func": "const setbusy = global.get('setBusyStatus')(msg.payload);\n\nsetbusy.then(setbusy => {\n    node.warn(setbusy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3980,
        "y": 340,
        "wires": []
    },
    {
        "id": "a60ccea8.42b6c",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 3720,
        "y": 340,
        "wires": [
            [
                "ad28bc2a.8bf1a"
            ]
        ]
    },
    {
        "id": "c40d4752.87d458",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4000,
        "y": 400,
        "wires": []
    },
    {
        "id": "aa9320b.f5d1be",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 3720,
        "y": 400,
        "wires": [
            [
                "c40d4752.87d458"
            ]
        ]
    },
    {
        "id": "16d8ed41.e74b83",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "Tests",
        "info": "",
        "x": 3610,
        "y": 160,
        "wires": []
    },
    {
        "id": "d61c34b3.1152b8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"free\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4580,
        "y": 400,
        "wires": [
            [
                "44c36c5f.4ab384"
            ]
        ]
    },
    {
        "id": "b4bc5daa.fc48a",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 4290,
        "y": 400,
        "wires": [
            [
                "d61c34b3.1152b8"
            ]
        ]
    },
    {
        "id": "44c36c5f.4ab384",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4800,
        "y": 400,
        "wires": []
    },
    {
        "id": "acf7aa27.789568",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "setBusyStatus()",
        "func": "const busy = global.get('setBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"busy\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4560,
        "y": 340,
        "wires": [
            [
                "f128973d.8af208"
            ]
        ]
    },
    {
        "id": "c36107b5.4a8178",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 4290,
        "y": 340,
        "wires": [
            [
                "acf7aa27.789568"
            ]
        ]
    },
    {
        "id": "f128973d.8af208",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4800,
        "y": 340,
        "wires": []
    },
    {
        "id": "d33f9ad1.7d5ee8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = busy;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4600,
        "y": 280,
        "wires": [
            [
                "914c0743.7ac478"
            ]
        ]
    },
    {
        "id": "e3f58d89.22fa2",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "get 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 4330,
        "y": 280,
        "wires": [
            [
                "d33f9ad1.7d5ee8"
            ]
        ]
    },
    {
        "id": "914c0743.7ac478",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4840,
        "y": 280,
        "wires": []
    },
    {
        "id": "31a5bbf5.ef68a4",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\nmsg.id = msg.payload;\nprice.then(price => {\n    \n    msg.payload = price;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4580,
        "y": 220,
        "wires": [
            [
                "1fd6bca8.2f2fe3"
            ]
        ]
    },
    {
        "id": "7dd4a226.2f874c",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "BTCUSDT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 4250,
        "y": 220,
        "wires": [
            [
                "31a5bbf5.ef68a4"
            ]
        ]
    },
    {
        "id": "1fd6bca8.2f2fe3",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4840,
        "y": 220,
        "wires": []
    },
    {
        "id": "1f1c473a.9219a9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "let newset = {\"status\":{\n  \"curenntprice\": \"555\",\n}};\n//newset = JSON.stringify(newset);\n\n\nmsg.payload = newset;\nmsg.topic = msg.botid;\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;\n\n\n\n//node.send(Object.assign({}, msg));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3920,
        "y": 500,
        "wires": [
            [
                "5ac8d203.850e3c"
            ]
        ]
    },
    {
        "id": "e0203d6c.492c8",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "botid",
                "v": "5fa4a9f6e4ef8c0024bbdcc0",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "5fa4a9f6e4ef8c0024bbdcc0",
        "x": 3700,
        "y": 500,
        "wires": [
            [
                "1f1c473a.9219a9"
            ]
        ]
    },
    {
        "id": "ecc64228.07c96",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4290,
        "y": 500,
        "wires": []
    },
    {
        "id": "5ac8d203.850e3c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "updateSettings",
        "func": "const upd = global.get('updateSettings')(msg.payload, msg.topic);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4120,
        "y": 500,
        "wires": [
            [
                "ecc64228.07c96"
            ]
        ]
    },
    {
        "id": "13f2257b.01983b",
        "type": "graphql",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "get bot all data",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bot (id: \"{{payload}}\"){\n    id\n    settings\n    last_price\n    busy\n    floors\n    status\n    finance\n    ttp\n    zapret_na_zakup\n     keypair{\n      apikey\n      secret\n      market\n    }\n  }\n}",
        "x": 240,
        "y": 960,
        "wires": [
            [
                "18fc789.fac9d87"
            ],
            []
        ]
    },
    {
        "id": "a445188a.34a218",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "updateSettings : price, zapret_na_zakup, status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.bot.last_price = Number(msg.payload);\n    \nif ((msg.bot.last_price > msg.bot.status.sr_ma_big)&&(msg.bot.last_price > msg.bot.status.sr_ma_small)){\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n}\n\nlet newset = {\"last_price\":Number(msg.payload),\n                \"status\":msg.bot.status, \n                \"zapret_na_zakup\":msg.bot.zapret_na_zakup\n    };\n\nmsg.payload = newset;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n\n    msg.payload = {\"bot\":msg.bot};\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n    node.status({fill:\"red\",shape:\"dot\"});\n});\n\n//   \"zapret_na_zakup\":msg.bot.zapret_na_zakup",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1360,
        "y": 960,
        "wires": [
            [
                "d010274c.5b8918"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "71acd437.96b3dc",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "last_price ? current price",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "bot.last_price",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "bot.last_price",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 960,
        "wires": [
            [
                "a445188a.34a218"
            ],
            [
                "23a461b5.8934de"
            ]
        ]
    },
    {
        "id": "12960d0b.36ef23",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "updateSettings : busy=false",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet newsetb = {\"busy\":false};\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});  \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2380,
        "y": 720,
        "wires": [
            [
                "3e18acb8.6ea274"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "18fc789.fac9d87",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "prepare getprice",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.payload.bot.settings.moneta;\nmsg.bot = msg.payload.bot;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 960,
        "wires": [
            [
                "79163972.5bdbe8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "79163972.5bdbe8",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 620,
        "y": 960,
        "wires": [
            [
                "a9b8fcea.cf55d"
            ]
        ]
    },
    {
        "id": "3e18acb8.6ea274",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 780,
        "wires": []
    },
    {
        "id": "536d19d6.716798",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "updateSettings : busy=true",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\nlet newset = {\"busy\":true};\n\nmsg.topic = msg.payload;\nmsg.payload = newset;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n\nconst upd = global.get('updateSettings')(msg.payload, msg.topic);\n\nupd.then(upd => {\n    \n    msg.payload = msg.topic;\n    let idstep = msg.topic+\"-step\";\n\n    \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n    node.done();\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1880,
        "y": 720,
        "wires": [
            [
                "9d731fd4.ec333"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a9b8fcea.cf55d",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 960,
        "wires": [
            [
                "71acd437.96b3dc"
            ]
        ]
    },
    {
        "id": "9d731fd4.ec333",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start 250",
        "links": [
            "34642144.ae139e"
        ],
        "x": 2055,
        "y": 720,
        "wires": [],
        "icon": "font-awesome/fa-space-shuttle"
    },
    {
        "id": "34642144.ae139e",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "узбек 250",
        "links": [
            "9d731fd4.ec333",
            "bdd26a23.d309d"
        ],
        "x": 115,
        "y": 960,
        "wires": [
            [
                "13f2257b.01983b"
            ]
        ],
        "icon": "font-awesome/fa-space-shuttle"
    },
    {
        "id": "618930a2.3dffb",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "определяем этаж",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet lp = msg.bot.last_price;\nlet f = msg.bot.floors;\n\n    var curfloor = f.filter(function(floor) {\n     return ((floor[1]<=lp)&&(floor[2]>lp));\n    });\n\nif (curfloor[0]) {\n   // node.warn(curfloor); //\n   //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n   \n   \n    msg.bot.status.currentfloor = curfloor[0];\n    return [msg, null];\n} \nelse\n{\n    \n     //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle+\"вне сетки\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    \n   node.status({fill:\"red\",shape:\"dot\"}); \n   // node.warn(\"вне сетки\"); \n    return [null,msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 368.5714569091797,
        "y": 3244.285919189453,
        "wires": [
            [
                "654f08ad.d21cf8",
                "79a93671.4908f"
            ],
            [
                "ec3bcc27.2d321"
            ]
        ]
    },
    {
        "id": "52932694.e0d918",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "вне сетки",
        "info": "",
        "x": 380,
        "y": 3300,
        "wires": []
    },
    {
        "id": "e34cab2c.f35798",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "работаем со всеми этажами",
        "info": "",
        "x": 1480,
        "y": 900,
        "wires": []
    },
    {
        "id": "654f08ad.d21cf8",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус этажа",
        "property": "bot.status.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 598.5714569091797,
        "y": 3244.285919189453,
        "wires": [
            [
                "9a8d53a0.bd127"
            ],
            [],
            [
                "afd8e2a9.7ef34"
            ],
            [
                "4583d2f5.6234ac"
            ],
            [
                "c397e056.6b1a3"
            ]
        ]
    },
    {
        "id": "9a8d53a0.bd127",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1158.5714569091797,
        "y": 2924.285919189453,
        "wires": [
            [
                "e16705a1.83df08",
                "ed3ebb40.401b98"
            ],
            [
                "ead17618.db03e8",
                "f053413b.f6608"
            ]
        ]
    },
    {
        "id": "d010274c.5b8918",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "передаем этажному узбеку",
        "links": [
            "78ca5c87.8628d4"
        ],
        "x": 1595,
        "y": 960,
        "wires": []
    },
    {
        "id": "b414ae7e.1f40d",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "name": "этажный узбек",
        "links": [
            "ac559e43.94903",
            "ce43fd6d.7b213",
            "e7b2e93a.d772a8",
            "6b66fec2.62c95",
            "64ef31ed.e495e8"
        ],
        "x": 155,
        "y": 1520,
        "wires": [
            [
                "7a8474f8.a35f2c"
            ]
        ]
    },
    {
        "id": "ead17618.db03e8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1293.5714569091797,
        "y": 2964.285919189453,
        "wires": []
    },
    {
        "id": "ec3bcc27.2d321",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "вне сетки",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 453.5714569091797,
        "y": 3304.285919189453,
        "wires": []
    },
    {
        "id": "e545caa6.7236c8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "цена не изменилась",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1595,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fee94f7f.5f093",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "запрещено закупать",
        "info": "",
        "x": 1160,
        "y": 2960,
        "wires": []
    },
    {
        "id": "503437af.280cc8",
        "type": "graphql",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "gql запрос списка ботов",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bots{\n  onoff\n  id\n  busy\n  }\n}",
        "x": 790,
        "y": 480,
        "wires": [
            [
                "8deed84b.3c9898"
            ],
            []
        ]
    },
    {
        "id": "8deed84b.3c9898",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "payload = payload.bots",
        "func": "\nmsg.payload = msg.payload.bots;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "d4a5db44.14dd68"
            ]
        ]
    },
    {
        "id": "d4a5db44.14dd68",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1250,
        "y": 480,
        "wires": [
            [
                "1cce308b.ed6fef"
            ]
        ]
    },
    {
        "id": "1cce308b.ed6fef",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "onoff === true",
        "func": "if (msg.payload.onoff === true){\n\n     msg.payload = msg.payload.id;\n\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1400,
        "y": 480,
        "wires": [
            [
                "2c379b0e.e23f04"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "4a9286e5.e8f4e8",
        "type": "trigger",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "503437af.280cc8"
            ]
        ]
    },
    {
        "id": "29caead0.b6b606",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "Расчет МА",
        "info": "",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "2c379b0e.e23f04",
        "type": "graphql",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "get bot all data",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bot (id: \"{{payload}}\"){\n    id\n    settings\n    last_price\n    status\n    zapret_na_zakup\n     keypair{\n      apikey\n      secret\n      market\n    }\n  }\n}",
        "x": 1600,
        "y": 480,
        "wires": [
            [
                "7ecd73a6.b4458c"
            ],
            []
        ]
    },
    {
        "id": "7ecd73a6.b4458c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "get candlestick",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.payload.bot.keypair.apikey,\n\tAPISECRET: msg.payload.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.payload.bot.settings.moneta;\nlet deep = msg.payload.bot.settings.ma2;\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\nmsg.bot = msg.payload.bot;\n\nbinance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n // console.info(\"candlesticks()\", ticks);\n // let last_tick = ticks[ticks.length - 1];\n // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n  //console.info(symbol+\" last close: \"+close);\n  msg.payload = ticks;\n  \n  node.send(msg);\n  return;\n  \n}, {limit: deep});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1800,
        "y": 480,
        "wires": [
            [
                "5ad83996.397588"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "5ad83996.397588",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "расчет MA",
        "func": "let candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1970,
        "y": 480,
        "wires": [
            [
                "3c339a4d.3cb876"
            ]
        ]
    },
    {
        "id": "3c339a4d.3cb876",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "update bot status",
        "func": "\n\nlet newsetb = {\"status\":msg.bot.status};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2150,
        "y": 480,
        "wires": [
            [
                "3df007b7.771648"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e16705a1.83df08",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.last_price).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.status.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\nnode.warn(quantity);\n\n//msg.payload = \"qjson.status\";\n\n\n\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1428.5714569091797,
        "y": 2924.285919189453,
        "wires": [
            [
                "7c34199a.ae4948",
                "3ff7fc13.f3a62c"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "7c34199a.ae4948",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"0 - change floors, finance\");\n\n\nlet currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1638.5714569091797,
        "y": 2924.285919189453,
        "wires": [
            [
                "4b9e0594.e0be5c"
            ]
        ]
    },
    {
        "id": "4b9e0594.e0be5c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1888.5714569091797,
        "y": 2924.285919189453,
        "wires": [
            [
                "2956ac05.ff4344",
                "7ecf7e00.a0d31"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ab453ff0.f0607",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 760,
        "wires": []
    },
    {
        "id": "2956ac05.ff4344",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2073.5714569091797,
        "y": 2904.285919189453,
        "wires": []
    },
    {
        "id": "2fb97838.e99388",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2155,
        "y": 2960,
        "wires": []
    },
    {
        "id": "623691b3.5a4c",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "определяем изменилась ли цена",
        "info": "",
        "x": 299,
        "y": 900,
        "wires": []
    },
    {
        "id": "cb8cd7bb.8245b8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "дежурный по этажу",
        "info": "",
        "x": 320,
        "y": 3140,
        "wires": []
    },
    {
        "id": "75b77b62.c812e4",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "topic",
        "func": "msg.topic = msg.bot.id\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1550,
        "y": 3080,
        "wires": [
            [
                "e8d3ff71.0b342"
            ]
        ]
    },
    {
        "id": "a4f0bf29.e2039",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//msg.bot = msg.payload.bot;\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, \"покупаем\");\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.status.currentfloor[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 3080,
        "wires": [
            [
                "1f74cb03.b098d5"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1f74cb03.b098d5",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1380,
        "y": 3080,
        "wires": [
            [
                "75b77b62.c812e4"
            ]
        ]
    },
    {
        "id": "e8d3ff71.0b342",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1740,
        "y": 3080,
        "wires": [
            [
                "2fb97838.e99388"
            ],
            [
                "2fb97838.e99388"
            ],
            [
                "bfa40a78.696948"
            ],
            [],
            [
                "c5286ec6.a8b15"
            ],
            [
                "c5286ec6.a8b15"
            ]
        ]
    },
    {
        "id": "eab0e428.fcd408",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NEW",
        "info": "",
        "x": 2170,
        "y": 2920,
        "wires": []
    },
    {
        "id": "31d94907.d5ee46",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2190,
        "y": 3020,
        "wires": []
    },
    {
        "id": "c887e0b8.f3139",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2170,
        "y": 3160,
        "wires": []
    },
    {
        "id": "53825580.1576fc",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2230,
        "y": 3340,
        "wires": []
    },
    {
        "id": "6dcd6fc8.44e7a",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "0 - Свободно",
        "info": "",
        "x": 1090,
        "y": 2880,
        "wires": []
    },
    {
        "id": "4eb7b103.982d3",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "1 - Покупаем",
        "info": "",
        "x": 1090,
        "y": 3040,
        "wires": []
    },
    {
        "id": "afd8e2a9.7ef34",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "check price for sale start",
        "func": "if (msg.bot.last_price >= msg.bot.status.currentfloor[5]){\n    msg.bot.status.currentfloor[7] = 3;\n    \n\n    return [null,msg];\n    \n} else {\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1148.5714569091797,
        "y": 3244.285919189453,
        "wires": [
            [
                "58341de1.c6a694"
            ],
            [
                "4c8c6a95.68df5c"
            ]
        ]
    },
    {
        "id": "a25fa3a.ee7886",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 1120,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4b58e0d8.8011e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "3 - Продаём",
        "info": "",
        "x": 1090,
        "y": 3340,
        "wires": []
    },
    {
        "id": "c397e056.6b1a3",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1098.5714569091797,
        "y": 3524.285919189453,
        "wires": [
            []
        ]
    },
    {
        "id": "6c1c2e57.86b3e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "4 - Продали",
        "info": "",
        "x": 1090,
        "y": 3480,
        "wires": []
    },
    {
        "id": "933bc906.115c18",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 3060,
        "wires": [
            [
                "abadb293.75484"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a43ddf8b.ec7a1",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 3200,
        "wires": [
            [
                "ff0bcae8.e1f978"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1592eedd.d43391",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 3380,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "bfa40a78.696948",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2240,
        "y": 3060,
        "wires": [
            [
                "933bc906.115c18"
            ]
        ]
    },
    {
        "id": "2d40e9a0.c0ec26",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем покупку\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2240,
        "y": 3200,
        "wires": [
            [
                "a43ddf8b.ec7a1"
            ]
        ]
    },
    {
        "id": "c5286ec6.a8b15",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = msg.bot.finance.baseinorders + Number(msg.resp.origQty) * Number(msg.resp.price);\nmsg.bot.finance.basenal = msg.bot.finance.basenal - Number(msg.resp.origQty) * Number(msg.resp.price);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2260,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "abadb293.75484",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2695,
        "y": 3060,
        "wires": []
    },
    {
        "id": "ea3d3b55.149208",
        "type": "http in",
        "z": "38c422f8.b82bf6",
        "name": "",
        "url": "/botdel",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2750,
        "y": 160,
        "wires": [
            [
                "3df28ba1.815a34",
                "40cd7415.3fcbe4"
            ]
        ]
    },
    {
        "id": "3df28ba1.815a34",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 100,
        "wires": []
    },
    {
        "id": "78ca5c87.8628d4",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "d010274c.5b8918"
        ],
        "x": 115,
        "y": 1180,
        "wires": [
            [
                "34f31521.2b27d2"
            ]
        ]
    },
    {
        "id": "ac559e43.94903",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 975,
        "y": 1140,
        "wires": []
    },
    {
        "id": "160b4dd4.4f8e12",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "5e6d0362.224584",
                "650ece50.fb118"
            ],
            [
                "61b59ea7.10c3a",
                "63a1b9e8.5ea0a"
            ]
        ]
    },
    {
        "id": "61b59ea7.10c3a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "filter all buy orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.bot = msg.payload.bot;\n\n\nlet f = msg.bot.floors;\n\n var openfloors = f.filter(function(floor) {\n     return (floor[7] == 1);\n    });\n\nmsg.bot.openfoors = openfloors;\n\nif (openfloors.length > 0){\n    msg.payload = openfloors;\n    \n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"green\",shape:\"ring\",text:openfloors.length});\n    return [msg, null];\n    \n}\nelse{\n    \n    //>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"blue\",shape:\"ring\",text:openfloors.length});\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 1220,
        "wires": [
            [
                "415a64d7.94e364"
            ],
            [
                "230838f7.7d169"
            ]
        ]
    },
    {
        "id": "550838d7.0c4118",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "cansel buy orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.orderid;\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n        \n        //>трекер>\n            let end_node_time = Date.parse(new Date()) / 1000;\n            let duration = end_node_time - start_node_time;\n            track.push({\n                \"steptitle\": steptitle,\n                \"start_node_time\": start_node_time,\n                \"end_node_time\": end_node_time,\n                \"duration\": duration\n            });\n            flow.set(\"track\", track);\n        //>трекер>\n        \n        \n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n        //>трекер>\n            let end_node_time = Date.parse(new Date()) / 1000;\n            let duration = end_node_time - start_node_time;\n            track.push({\n                \"steptitle\": steptitle,\n                \"start_node_time\": start_node_time,\n                \"end_node_time\": end_node_time,\n                \"duration\": duration\n            });\n            flow.set(\"track\", track);\n        //>трекер>\n\n        \n        node.status({fill:\"green\", shape:\"ring\", text:resp.orderId});\n        node.send(msg);\n        \n                \n    }\n    //node.status({}); //clear status message\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2610,
        "y": 1160,
        "wires": [
            [
                "f369c890.c7bf58"
            ]
        ]
    },
    {
        "id": "89848e2c.9b815",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3230,
        "y": 1160,
        "wires": [
            [
                "e7b2e93a.d772a8",
                "d9c2af4e.ac296"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "f369c890.c7bf58",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.payload[14])*Number(msg.payload[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.payload[14])*Number(msg.payload[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.payload;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2840,
        "y": 1160,
        "wires": [
            [
                "99328f1c.3a173",
                "b3a83312.3848e"
            ]
        ]
    },
    {
        "id": "e7b2e93a.d772a8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "заперещено закупать",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 3395,
        "y": 1160,
        "wires": []
    },
    {
        "id": "99328f1c.3a173",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d9c2af4e.ac296",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 1220,
        "wires": []
    },
    {
        "id": "6efa7034.90b4e",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1310,
        "y": 1200,
        "wires": [
            [
                "2bde6947.f7ecae"
            ]
        ]
    },
    {
        "id": "b3a83312.3848e",
        "type": "join",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3030,
        "y": 1160,
        "wires": [
            [
                "89848e2c.9b815"
            ]
        ]
    },
    {
        "id": "ce43fd6d.7b213",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 1195,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ff0bcae8.e1f978",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2695,
        "y": 3200,
        "wires": []
    },
    {
        "id": "91c9d8fa.bc1ae8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "test get order status if orderid >0",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nnode.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = 202496790;\nlet moneta = \"NEOUSDT\";\n//node.warn(binance);\nif ((orderid !== \"0\") && (orderid !== \"\") ){\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    \tnode.send(msg);\n    \treturn;\n\t}\n\tif (qjson) {\n    msg.st = qjson.status;\n    \tnode.send(msg);\n\treturn;\n\t\t\n\t}\n\t\n\n});} else {\n    node.send(msg);\n    \treturn;\n}\n\n//msg.payload = \"qjson.status\";\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2660,
        "y": 260,
        "wires": [
            [
                "ac2cb36a.19ee5"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ac2cb36a.19ee5",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 260,
        "wires": []
    },
    {
        "id": "19ac0e49.7949f2",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2380,
        "y": 260,
        "wires": [
            [
                "91c9d8fa.bc1ae8"
            ]
        ]
    },
    {
        "id": "8a4297b.40f9068",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "myHash",
        "payload": "{\"c\":1,\"b\":7}",
        "payloadType": "json",
        "x": 1720,
        "y": 360,
        "wires": [
            [
                "eaad8fdb.81809"
            ]
        ]
    },
    {
        "id": "fbfb23e.5f7b5e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2200,
        "y": 360,
        "wires": []
    },
    {
        "id": "eaad8fdb.81809",
        "type": "redis-command",
        "z": "f6f2187d.f17ca8",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1920,
        "y": 360,
        "wires": [
            [
                "fbfb23e.5f7b5e"
            ]
        ]
    },
    {
        "id": "4e692157.a872e",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1690,
        "y": 440,
        "wires": [
            [
                "469d4181.1a5d9"
            ]
        ]
    },
    {
        "id": "c8c45ed8.387fe",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2210,
        "y": 440,
        "wires": []
    },
    {
        "id": "469d4181.1a5d9",
        "type": "redis-command",
        "z": "f6f2187d.f17ca8",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "myHash",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1960,
        "y": 440,
        "wires": [
            [
                "c8c45ed8.387fe"
            ]
        ]
    },
    {
        "id": "ae927641.e7c9c8",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "9e86c87.9b76338"
            ]
        ]
    },
    {
        "id": "63f42518.92d9cc",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2250,
        "y": 580,
        "wires": []
    },
    {
        "id": "bd4ac6e0.9c9b68",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1730,
        "y": 640,
        "wires": [
            [
                "50cccb5e.592434"
            ]
        ]
    },
    {
        "id": "f7f02052.a5698",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2250,
        "y": 640,
        "wires": []
    },
    {
        "id": "9e86c87.9b76338",
        "type": "redis-command",
        "z": "f6f2187d.f17ca8",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\",\"memberB\",\"memberC\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1990,
        "y": 580,
        "wires": [
            [
                "63f42518.92d9cc"
            ]
        ]
    },
    {
        "id": "50cccb5e.592434",
        "type": "redis-command",
        "z": "f6f2187d.f17ca8",
        "server": "f120eab2.0a60a8",
        "command": "sismember",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberL\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2010,
        "y": 640,
        "wires": [
            [
                "f7f02052.a5698"
            ]
        ]
    },
    {
        "id": "6b636ea6.b82e8",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BNBUSDT-34553",
        "payloadType": "str",
        "x": 1680,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "1032fa90.327b55",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2170,
        "y": 800,
        "wires": []
    },
    {
        "id": "4ee6486c.20dd88",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\n\nbusy.then(busy => {\n\n    msg.botid = msg.payload;\n    msg.topic = msg.payload;\n    msg.isbusy = JSON.parse(busy);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2520,
        "y": 400,
        "wires": [
            [
                "cf2bc524.2f85a8"
            ]
        ]
    },
    {
        "id": "cf2bc524.2f85a8",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "check busy and do",
        "property": "isbusy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": true,
        "outputs": 3,
        "x": 2730,
        "y": 400,
        "wires": [
            [
                "58d8c18d.f93d2"
            ],
            [
                "58d8c18d.f93d2"
            ],
            [
                "2fc2b07.60d105"
            ]
        ],
        "inputLabels": [
            "boolean"
        ],
        "outputLabels": [
            "new bot",
            "free",
            "busy"
        ]
    },
    {
        "id": "2fc2b07.60d105",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "pauseType": "delay",
        "timeout": "125",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2510,
        "y": 460,
        "wires": [
            [
                "d4fd8032.7f147"
            ]
        ]
    },
    {
        "id": "d4fd8032.7f147",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\n\nbusy.then(busy => {\n\n    msg.botid = msg.payload;\n    msg.topic = msg.payload;\n    msg.isbusy = JSON.parse(busy);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2520,
        "y": 500,
        "wires": [
            [
                "eb3cde8a.165de"
            ]
        ]
    },
    {
        "id": "db711e1b.064b1",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Занято. Ждем и пробуем снова",
        "info": "",
        "x": 2570,
        "y": 540,
        "wires": []
    },
    {
        "id": "754d5af6.0e38f4",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "reject",
        "func": "msg.payload = \"reject\"+msg.botid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3010,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "eb3cde8a.165de",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "check busy and do",
        "property": "isbusy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": true,
        "outputs": 3,
        "x": 2730,
        "y": 500,
        "wires": [
            [
                "58d8c18d.f93d2"
            ],
            [
                "58d8c18d.f93d2"
            ],
            [
                "754d5af6.0e38f4"
            ]
        ],
        "inputLabels": [
            "boolean"
        ],
        "outputLabels": [
            "new bot",
            "free",
            "busy"
        ]
    },
    {
        "id": "58d8c18d.f93d2",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "pauseType": "rate",
        "timeout": "125",
        "timeoutUnits": "milliseconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3040,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "792a2196.23a4c",
        "type": "status",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "scope": [
            "18fc789.fac9d87",
            "7792f18e.f49f5"
        ],
        "x": 3420,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc0e6b4.e86ba8",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3450,
        "y": 240,
        "wires": []
    },
    {
        "id": "58341de1.c6a694",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "купили держим",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1353.5714569091797,
        "y": 3224.285919189453,
        "wires": []
    },
    {
        "id": "648a5444.882654",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "ttp",
        "info": "",
        "x": 210,
        "y": 4040,
        "wires": []
    },
    {
        "id": "19ac974.7607b69",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.orderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n          }\n          node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3450,
        "y": 4060,
        "wires": [
            [
                "80aa4384.3193d8"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "64e15eaf.9f0c4",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1850,
        "y": 4340,
        "wires": [
            [
                "fe3964ed.2973e8"
            ],
            [
                "42781025.7365a"
            ]
        ]
    },
    {
        "id": "80aa4384.3193d8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare set ttp to redis",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance, \"ttp\":msg.bot.ttp};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n\n    msg.payload = upd.ttp;\n    msg.topic = upd.ttp.topic;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3680,
        "y": 4060,
        "wires": [
            [
                "e27e8a1a.9239d8",
                "5a30fbd5.81ebac"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "9dfe3623.94b6c",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 4015,
        "y": 4060,
        "wires": []
    },
    {
        "id": "e27e8a1a.9239d8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3690,
        "y": 4020,
        "wires": []
    },
    {
        "id": "9cde1726.3e388",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 2375,
        "y": 4560,
        "wires": []
    },
    {
        "id": "a5f99bee.f8a658",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "cancel stopsell order if exist",
        "func": "\nreturn msg;function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.orderid;\n\n//msg.payload = \"qjson.status\";\nif (orderid > 0){\n\n    binance.cancel(moneta, orderid, (err, resp) => {\n     // console.info(\"Limit Buy response\", response);\n     // console.info(\"order id: \" + response.orderId);\n        if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n            \n            \n            node.send(msg);\n            // ;\n        \n        }\n        if (resp) {\n            msg.orderid = resp.orderId;\n            msg.resp = resp;\n            node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n            \n            \n            let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n            let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n            \n            msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n            msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n            \n            \n            node.send(msg);\n            //return [null,msg];\n                    \n        }\n        //node.status({}); //clear status message\n    });\n} else {\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3180,
        "y": 4060,
        "wires": [
            [
                "1a74d99c.39b9ae",
                "19ac974.7607b69"
            ]
        ]
    },
    {
        "id": "1a74d99c.39b9ae",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3250,
        "y": 4020,
        "wires": []
    },
    {
        "id": "6c570894.34fb88",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "calculate stop price",
        "func": "\nmsg.bot.last_price = Number(msg.payload);\nmsg.bot.ttp.raschstopprice = Number(Number(msg.bot.last_price - msg.bot.last_price / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\nmsg.bot.ttp.curstop = Number(msg.bot.ttp.curstop || 0);\nmsg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\nmsg.bot.ttp.quantity = Number(msg.bot.ttp.quantity);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1590,
        "y": 4340,
        "wires": [
            [
                "64e15eaf.9f0c4",
                "fd3c99ac.1a869"
            ]
        ]
    },
    {
        "id": "fd3c99ac.1a869",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 4300,
        "wires": []
    },
    {
        "id": "5791acbc.438464",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 3840,
        "wires": []
    },
    {
        "id": "2dd429e8.fc29be",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1975,
        "y": 3520,
        "wires": []
    },
    {
        "id": "59c7fca9.251a84",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "topic",
        "func": "msg.topic = msg.bot.id\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1550,
        "y": 3380,
        "wires": [
            [
                "73bb335f.8e910c"
            ]
        ]
    },
    {
        "id": "73bb335f.8e910c",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1760,
        "y": 3620,
        "wires": [
            [
                "2dd429e8.fc29be"
            ],
            [
                "2dd429e8.fc29be"
            ],
            [
                "2dd429e8.fc29be"
            ],
            [
                "a2e1c788.fe99b"
            ],
            [
                "26d2069a.8c7f4a"
            ],
            [
                "3c05d46c.6ed684"
            ],
            [
                "3c05d46c.6ed684"
            ]
        ]
    },
    {
        "id": "44ff20b0.033da8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NEW",
        "info": "",
        "x": 2110,
        "y": 3480,
        "wires": []
    },
    {
        "id": "c30450d4.7672",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2010,
        "y": 3580,
        "wires": []
    },
    {
        "id": "1d2b8df3.148562",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 1990,
        "y": 3680,
        "wires": []
    },
    {
        "id": "c72ec1ed.163048",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 1770,
        "y": 3800,
        "wires": []
    },
    {
        "id": "a8d933b5.a10878",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2590,
        "y": 3720,
        "wires": [
            [
                "63519573.f7e63c",
                "546906a8.9838d8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "929a70e6.c1b508",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2050,
        "y": 3840,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6f6fe048.ee9c08",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем продажу\");\n\nlet sellprice = \n    \nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.status.currentfloor[14]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*sellprice);\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.quotainorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;\n\n\n\n\n    \nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.status.currentfloor[14]));\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.quotainorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.quotanal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[11] = 0;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 5,
        "initialize": "",
        "finalize": "",
        "x": 2320,
        "y": 3720,
        "wires": [
            [
                "a8d933b5.a10878",
                "2e812e84.cc6522"
            ]
        ]
    },
    {
        "id": "3c05d46c.6ed684",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = msg.bot.finance.baseinorders + Number(msg.resp.origQty) * Number(msg.resp.price);\nmsg.bot.finance.basenal = msg.bot.finance.basenal - Number(msg.resp.origQty) * Number(msg.resp.price);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1780,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "a2e1c788.fe99b",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1975,
        "y": 3620,
        "wires": []
    },
    {
        "id": "63519573.f7e63c",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2755,
        "y": 3600,
        "wires": []
    },
    {
        "id": "2e812e84.cc6522",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 3760,
        "wires": []
    },
    {
        "id": "546906a8.9838d8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 3760,
        "wires": []
    },
    {
        "id": "45684b39.42603c",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1380,
        "y": 3380,
        "wires": [
            [
                "59c7fca9.251a84"
            ]
        ]
    },
    {
        "id": "4583d2f5.6234ac",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//msg.bot = msg.payload.bot;\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, \"prepare get order status\");\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1148.5714569091797,
        "y": 3384.285919189453,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "61515a9a.c79fc4",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2270,
        "y": 3480,
        "wires": []
    },
    {
        "id": "b9d33800.c2b3b",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2330,
        "y": 2920,
        "wires": []
    },
    {
        "id": "b7f15645.081678",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "не проработано",
        "info": "",
        "x": 2440,
        "y": 3340,
        "wires": []
    },
    {
        "id": "50643dea.dae064",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "не проработано",
        "info": "",
        "x": 1980,
        "y": 3800,
        "wires": []
    },
    {
        "id": "26d2069a.8c7f4a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2100,
        "y": 3720,
        "wires": [
            []
        ]
    },
    {
        "id": "5fdfa509.325bf4",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3470,
        "y": 780,
        "wires": []
    },
    {
        "id": "40cd7415.3fcbe4",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "payload.event",
        "property": "payload.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "entry.create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "entry.delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 160,
        "wires": [
            [
                "151ea5ea.e5efc2",
                "578b7e81.f8ac68"
            ],
            [
                "cb2efd3.46939",
                "134207f0.1d2018"
            ]
        ]
    },
    {
        "id": "151ea5ea.e5efc2",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3130,
        "y": 100,
        "wires": []
    },
    {
        "id": "cb2efd3.46939",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3110,
        "y": 260,
        "wires": []
    },
    {
        "id": "578b7e81.f8ac68",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3160,
        "y": 140,
        "wires": [
            [
                "9167896b.0577b"
            ]
        ]
    },
    {
        "id": "134207f0.1d2018",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3160,
        "y": 200,
        "wires": [
            [
                "f393e1a2.a38a68"
            ]
        ]
    },
    {
        "id": "9167896b.0577b",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 140,
        "wires": []
    },
    {
        "id": "f393e1a2.a38a68",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 200,
        "wires": []
    },
    {
        "id": "8b92a4cb.4008b",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "ttp",
        "obj": true,
        "x": 1948.5714569091797,
        "y": 3264.285919189453,
        "wires": []
    },
    {
        "id": "4c8c6a95.68df5c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare data for ttp",
        "func": "msg.payload = {\"quantity\":msg.bot.status.currentfloor[14],\"botid\":msg.bot.id, \"bot\":msg.bot}\nmsg.topic = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1428.5714569091797,
        "y": 3264.285919189453,
        "wires": [
            [
                "666f7c9e.05f384"
            ]
        ]
    },
    {
        "id": "bd19b9b9.ddf578",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 210,
        "y": 3940,
        "wires": []
    },
    {
        "id": "de5d32c1.17533",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "ttp",
        "obj": true,
        "timeout": 0,
        "x": 210,
        "y": 3980,
        "wires": [
            [
                "bd19b9b9.ddf578",
                "5cf84305.fd3fd4"
            ]
        ]
    },
    {
        "id": "58c269d6.3c8288",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 4000,
        "wires": [
            [
                "10e3ff7f.a66d31",
                "f1bf583c.436068"
            ],
            [
                "e581e609.d28648",
                "4810063.73d62f8"
            ]
        ]
    },
    {
        "id": "1aef3019.21c6b8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 3960,
        "wires": []
    },
    {
        "id": "abfe3ac3.3de6c",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 4000,
        "wires": [
            [
                "1aef3019.21c6b8",
                "28d4f2aa.ee7e16"
            ]
        ]
    },
    {
        "id": "5cf84305.fd3fd4",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "ttp get data prepare",
        "func": "let botname = msg.payload.bot.settings.botname;\n\n\n\nmsg.topic = \"ttp:\" + botname;\nglobal.set(msg.topic, msg.payload.bot);\nmsg.payload = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 4000,
        "wires": [
            [
                "fa3d4c00.81544",
                "995c03a5.47fb7"
            ]
        ]
    },
    {
        "id": "fa3d4c00.81544",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 430,
        "y": 3960,
        "wires": []
    },
    {
        "id": "10e3ff7f.a66d31",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "стартуем ттп",
        "func": "msg.bot = global.get(msg.topic);\nlet ttp = {\n            raschstopprice: 0,\n            curstop: 0,\n            curorderid: 0,\n            quantity: msg.bot.status.currentfloor[14],\n            ttpbusy: false,\n            sold: false,\n            botid: msg.bot.id\n        }\nmsg.payload = ttp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 4000,
        "wires": [
            [
                "957da4a4.a4965",
                "abfe3ac3.3de6c"
            ]
        ]
    },
    {
        "id": "957da4a4.a4965",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 3960,
        "wires": []
    },
    {
        "id": "e581e609.d28648",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "дополняем действующий ттп",
        "func": "\n\nmsg.bot = global.get(msg.topic);\nlet ttp = {\"quantity\":Number(msg.payload.quantity) + Number(msg.bot.status.currentfloor[14]),}\nmsg.payload = ttp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 4120,
        "wires": [
            [
                "b3fcdc9.c3b90a",
                "81c17fe1.6a20a"
            ]
        ]
    },
    {
        "id": "b3fcdc9.c3b90a",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 4080,
        "wires": []
    },
    {
        "id": "995c03a5.47fb7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "get ttp from redis",
        "func": "\n\nconst upd = global.get('ttpget')(msg.topic);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 4000,
        "wires": [
            [
                "58c269d6.3c8288",
                "a1911359.dad238"
            ]
        ]
    },
    {
        "id": "81c17fe1.6a20a",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1290,
        "y": 4120,
        "wires": [
            [
                "6cbfc00b.9ab4e8"
            ]
        ]
    },
    {
        "id": "6cbfc00b.9ab4e8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1310,
        "y": 4080,
        "wires": []
    },
    {
        "id": "cd1809b7.b357e",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "ttp-pilot",
        "obj": true,
        "x": 1780,
        "y": 4000,
        "wires": []
    },
    {
        "id": "e00092ae.01eb38",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "ttp-pilot",
        "obj": true,
        "timeout": 0,
        "x": 250,
        "y": 4280,
        "wires": [
            [
                "22271ca4.eed32c",
                "bd2fb377.ae9a58"
            ]
        ]
    },
    {
        "id": "22271ca4.eed32c",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 4240,
        "wires": []
    },
    {
        "id": "28d4f2aa.ee7e16",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "команда на старт",
        "func": "\nmsg.payload = msg.topic;\nmsg.topic = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1430,
        "y": 4000,
        "wires": [
            [
                "10e6c794.fc5b2",
                "72566d53.f8c2dc"
            ]
        ]
    },
    {
        "id": "10e6c794.fc5b2",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 3960,
        "wires": []
    },
    {
        "id": "e72704f9.38636",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 310,
        "y": 720,
        "wires": [
            [
                "da9e4dd8.dda28"
            ]
        ]
    },
    {
        "id": "7454103b.deab28",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "name": "",
        "pauseType": "random",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "25",
        "randomLast": "75",
        "randomUnits": "seconds",
        "drop": false,
        "x": 500,
        "y": 4340,
        "wires": [
            [
                "bf9407e2.46673",
                "f30e2199.c59b08"
            ]
        ]
    },
    {
        "id": "bd2fb377.ae9a58",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "ttp get data prepare pilot",
        "func": "\n\nmsg.topic = msg.payload;\n\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 4280,
        "wires": [
            [
                "bf9407e2.46673",
                "714e8b3d.3e7fac"
            ]
        ]
    },
    {
        "id": "bf9407e2.46673",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "get ttp from redis",
        "func": "msg.bot = global.get(msg.topic);\n\nconst upd = global.get('ttpget')(msg.topic);\n\nupd.then(upd => {\n\n    //msg.payload = upd;\n    msg.bot.ttp = upd;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 4280,
        "wires": [
            [
                "dea40dd3.663d08",
                "e09dc045.d4c49"
            ]
        ]
    },
    {
        "id": "dea40dd3.663d08",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 4240,
        "wires": []
    },
    {
        "id": "fa09a74b.66d4d",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare getprice",
        "func": "  //  let idstep = msg.payload.bot.id+\"-step\";\n   // flow.set(idstep, 2);\n\n    let moneta = msg.bot.settings.moneta;\n\n    msg.bot.ttp.topic = msg.topic;\n    msg.payload = [];\n    msg.topic = \"prices:\" + moneta;\n    \n\n    \n    return msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 4340,
        "wires": [
            [
                "72ab8cd.fc1f774",
                "56c927c4.9e36f"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "72ab8cd.fc1f774",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1380,
        "y": 4340,
        "wires": [
            [
                "47a30b60.50a424",
                "6c570894.34fb88"
            ]
        ]
    },
    {
        "id": "47a30b60.50a424",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 4300,
        "wires": []
    },
    {
        "id": "56c927c4.9e36f",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 4300,
        "wires": []
    },
    {
        "id": "f30e2199.c59b08",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 890,
        "y": 4440,
        "wires": [
            [
                "9f90b50d.8b1378"
            ]
        ]
    },
    {
        "id": "9f90b50d.8b1378",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare change ttp on strapi",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 4440,
        "wires": [
            [
                "e9c97500.c25398"
            ]
        ]
    },
    {
        "id": "e9c97500.c25398",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change ttp on strapi",
        "func": "\n\nlet newsetb = {\"ttp\":msg.bot.ttp};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1380,
        "y": 4440,
        "wires": [
            [
                "c76c52e6.1f27d8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e09dc045.d4c49",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "is sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 4280,
        "wires": [
            [
                "a9929810.98fd1",
                "3a7a4e8c.230fb2"
            ],
            [
                "fa09a74b.66d4d",
                "2856a745.247248"
            ]
        ]
    },
    {
        "id": "a9929810.98fd1",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "ttp finish",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 4220,
        "wires": [
            [
                "ade150a7.859168"
            ]
        ]
    },
    {
        "id": "8dbb02a7.9de1a",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "name": "ttp-pilot-in",
        "links": [
            "9cde1726.3e388",
            "9dfe3623.94b6c",
            "a33221bc.6325b8",
            "46710d54.f2ae4c",
            "6c55898d.9098b8",
            "47edff0a.ea6f58"
        ],
        "x": 335,
        "y": 4340,
        "wires": [
            [
                "7454103b.deab28",
                "779d9cd3.7f8a3c"
            ]
        ]
    },
    {
        "id": "c76c52e6.1f27d8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 4400,
        "wires": []
    },
    {
        "id": "42781025.7365a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2130,
        "y": 4400,
        "wires": [
            [
                "ba25feef.f2d2d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ba25feef.f2d2d",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2360,
        "y": 4400,
        "wires": [
            [
                "717b0900.0502e8"
            ]
        ]
    },
    {
        "id": "8179e07b.cfc8a8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 4780,
        "wires": []
    },
    {
        "id": "717b0900.0502e8",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2160,
        "y": 4660,
        "wires": [
            [
                "9cde1726.3e388",
                "e3dc8325.6cc7f"
            ],
            [
                "a33221bc.6325b8",
                "64719c51.bbb0d4"
            ],
            [],
            [
                "89f61ffa.3d06f"
            ],
            [
                "aba0142d.67d2b"
            ],
            [
                "aba0142d.67d2b"
            ]
        ]
    },
    {
        "id": "71764859.8bacd8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NEW",
        "info": "",
        "x": 2390,
        "y": 4520,
        "wires": []
    },
    {
        "id": "c28d523f.479ce",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2410,
        "y": 4620,
        "wires": []
    },
    {
        "id": "7ebd2f54.94422",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2390,
        "y": 4720,
        "wires": []
    },
    {
        "id": "9c21498c.19eec8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2450,
        "y": 4860,
        "wires": []
    },
    {
        "id": "a08aa56b.2b8ab",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2710,
        "y": 4780,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "aba0142d.67d2b",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = msg.bot.finance.baseinorders + Number(msg.resp.origQty) * Number(msg.resp.price);\nmsg.bot.finance.basenal = msg.bot.finance.basenal - Number(msg.resp.origQty) * Number(msg.resp.price);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2460,
        "y": 4900,
        "wires": [
            []
        ]
    },
    {
        "id": "c94231d3.bb34e8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2550,
        "y": 4520,
        "wires": []
    },
    {
        "id": "8f213fad.708008",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "не проработано",
        "info": "",
        "x": 2640,
        "y": 4740,
        "wires": []
    },
    {
        "id": "89f61ffa.3d06f",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = \"true\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2500,
        "y": 4760,
        "wires": [
            [
                "acbc7a02.5f235",
                "46710d54.f2ae4c"
            ]
        ]
    },
    {
        "id": "acbc7a02.5f235",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 4720,
        "wires": []
    },
    {
        "id": "a33221bc.6325b8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 2375,
        "y": 4660,
        "wires": []
    },
    {
        "id": "46710d54.f2ae4c",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 2635,
        "y": 4640,
        "wires": []
    },
    {
        "id": "fab98b62.08e56",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "status NEW ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2920,
        "y": 4120,
        "wires": [
            [
                "a5f99bee.f8a658"
            ],
            [
                "6c55898d.9098b8"
            ]
        ]
    },
    {
        "id": "6c55898d.9098b8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 3055,
        "y": 4140,
        "wires": []
    },
    {
        "id": "8ca7f169.922b68",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "ситуация",
        "info": "когда stopsell частично заполнился, но потом цена отросла и бот хочет подвинуть ордер дальше вверх. \nПроблема будет если остаток меньше минимума лота.\nСейчас такой ордер мы просто оставляем висеть до заполненности.\nМожно пока в телеграмм о таких случаях стучать, чтобы хозяин вручную разруливал, но по уму надо двигать ордер, на ходу меняя quantity с соответствующей проекцией во floors",
        "x": 3140,
        "y": 4140,
        "wires": []
    },
    {
        "id": "5a30fbd5.81ebac",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3890,
        "y": 4060,
        "wires": [
            [
                "9dfe3623.94b6c"
            ]
        ]
    },
    {
        "id": "ade150a7.859168",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 4220,
        "wires": []
    },
    {
        "id": "aee7e2e6.6942c8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2350,
        "y": 4240,
        "wires": [
            [
                "25e5f137.e9f256"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "25e5f137.e9f256",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2580,
        "y": 4240,
        "wires": [
            [
                "aaad8119.7b15b"
            ]
        ]
    },
    {
        "id": "aaad8119.7b15b",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare data",
        "func": "if (msg.payload == \"NEW\") {\n    msg.payload = true;\n}\nelse {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2750,
        "y": 4120,
        "wires": [
            [
                "fab98b62.08e56"
            ]
        ]
    },
    {
        "id": "fe3964ed.2973e8",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 4300,
        "wires": [
            [
                "aee7e2e6.6942c8"
            ],
            [
                "397acf32.1d7f7"
            ]
        ]
    },
    {
        "id": "397acf32.1d7f7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(Number(msg.bot.status.currentfloor[14]) + Number(msg.bot.ttp.quantity))).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.orderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n          }\n          node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2330,
        "y": 4340,
        "wires": [
            [
                "f6ce130.8cebc7"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "f6ce130.8cebc7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare set ttp to redis",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance, \"ttp\":msg.bot.ttp};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = upd.ttp;\n    msg.topic = upd.ttp.topic;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2560,
        "y": 4340,
        "wires": [
            [
                "ca41c360.3ffe28",
                "9ce077b4.57df08"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "47edff0a.ea6f58",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "8dbb02a7.9de1a"
        ],
        "x": 2875,
        "y": 4220,
        "wires": []
    },
    {
        "id": "ca41c360.3ffe28",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 4300,
        "wires": []
    },
    {
        "id": "9ce077b4.57df08",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2790,
        "y": 4320,
        "wires": [
            [
                "47edff0a.ea6f58"
            ]
        ]
    },
    {
        "id": "10907153.2feab7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "канселятор topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1970,
        "y": 1200,
        "wires": [
            [
                "27dbb0df.4fa588",
                "4377a687.40ea08"
            ]
        ]
    },
    {
        "id": "2bde6947.f7ecae",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "get order status1",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.payload[8];\nlet userid = msg.bot.settings.userid;\n\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\nconst getorderstatus = global.get('getorderstatus')(userid, moneta, orderid);\n\n\ngetorderstatus.then(getorderstatus => {\n    \n    \n\n    msg.payload = getorderstatus;\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n    node.done();\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 1200,
        "wires": [
            [
                "e7d6b6d2.32065"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "27dbb0df.4fa588",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1160,
        "wires": []
    },
    {
        "id": "4377a687.40ea08",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2200,
        "y": 1200,
        "wires": [
            [
                "550838d7.0c4118"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ]
        ]
    },
    {
        "id": "dc26dcc0.bdbe6",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "NEW",
        "info": "",
        "x": 2430,
        "y": 1160,
        "wires": []
    },
    {
        "id": "64ef31ed.e495e8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "заперещено закупать",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 2395,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c952aeaf.2136b8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "купили держим",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1853.5714569091797,
        "y": 3324.285919189453,
        "wires": []
    },
    {
        "id": "666f7c9e.05f384",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = {\"bot\":msg.bot};\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1688.5714569091797,
        "y": 3264.285919189453,
        "wires": [
            [
                "c952aeaf.2136b8",
                "8b92a4cb.4008b"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "72566d53.f8c2dc",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1630,
        "y": 4000,
        "wires": [
            [
                "cd1809b7.b357e"
            ]
        ]
    },
    {
        "id": "3ffba51f.0ade62",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ttp:ALPHAUSDT-1605469791",
        "payloadType": "str",
        "x": 540,
        "y": 4140,
        "wires": [
            [
                "bd2fb377.ae9a58"
            ]
        ]
    },
    {
        "id": "3a7a4e8c.230fb2",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 4200,
        "wires": []
    },
    {
        "id": "2856a745.247248",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 4360,
        "wires": []
    },
    {
        "id": "2e2d6018.33d4f8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 780,
        "wires": [
            [
                "da9e4dd8.dda28"
            ]
        ]
    },
    {
        "id": "cf8e2d12.ded23",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "2e2d6018.33d4f8"
            ]
        ]
    },
    {
        "id": "779d9cd3.7f8a3c",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 430,
        "y": 4440,
        "wires": []
    },
    {
        "id": "e3dc8325.6cc7f",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 4560,
        "wires": []
    },
    {
        "id": "64719c51.bbb0d4",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 4660,
        "wires": []
    },
    {
        "id": "714e8b3d.3e7fac",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 4240,
        "wires": []
    },
    {
        "id": "f1bf583c.436068",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 3940,
        "wires": []
    },
    {
        "id": "4810063.73d62f8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 790,
        "y": 4060,
        "wires": []
    },
    {
        "id": "a1911359.dad238",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 630,
        "y": 3960,
        "wires": []
    },
    {
        "id": "f31fab3.4c5ea58",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NULL",
        "info": "",
        "x": 1990,
        "y": 3480,
        "wires": []
    },
    {
        "id": "bb34cdfd.cf01f",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3600,
        "y": 1920,
        "wires": [
            [
                "b8f09340.eee248"
            ]
        ]
    },
    {
        "id": "b8f09340.eee248",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "f1",
        "func": "node.status({fill:\"green\",shape:\"ring\",text:msg.payload});\nmsg.payload = msg.payload + \"ql\";\nreturn msg;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4040,
        "y": 1920,
        "wires": [
            [
                "9e86c3f7.3e3468"
            ],
            [],
            []
        ],
        "outputLabels": [
            "qqq",
            "www",
            "eee"
        ]
    },
    {
        "id": "b8d69f.2c77696",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4670,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3004b7a0.659c",
        "type": "status",
        "z": "38c422f8.b82bf6",
        "name": "",
        "scope": [
            "b8f09340.eee248"
        ],
        "x": 4040,
        "y": 2000,
        "wires": [
            [
                "ea00a371.fbf94"
            ]
        ]
    },
    {
        "id": "ea00a371.fbf94",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4190,
        "y": 2000,
        "wires": []
    },
    {
        "id": "aaa8d68e.331fb",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3800,
        "y": 2100,
        "wires": []
    },
    {
        "id": "dc3ca2bc.544f88",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3580,
        "y": 1060,
        "wires": [
            [
                "25a485a.8e0ec7a",
                "4baf433c.d3da5c"
            ]
        ]
    },
    {
        "id": "25a485a.8e0ec7a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3780,
        "y": 1180,
        "wires": [
            [
                "821b304c.c174e"
            ]
        ]
    },
    {
        "id": "cbf21da8.d49678",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4300,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2bb185ac.27b372",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = \"м\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4160,
        "y": 1520,
        "wires": [
            [
                "71d733f8.94a534"
            ]
        ]
    },
    {
        "id": "2fb7115.58b99ee",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4160,
        "y": 1600,
        "wires": [
            [
                "5d212be8.4ed244"
            ]
        ]
    },
    {
        "id": "eae4e50.88d0398",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "a",
        "payloadType": "str",
        "x": 4040,
        "y": 940,
        "wires": [
            [
                "3b4eeea5.7a8182"
            ]
        ]
    },
    {
        "id": "1b14a050.631f9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = Date.parse(new Date()) / 1000;\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\n\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 930,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "23a461b5.8934de",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "цена не изменилась",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 1020,
        "wires": [
            [
                "e545caa6.7236c8"
            ]
        ]
    },
    {
        "id": "79227fcb.dc9d18",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1610,
        "y": 100,
        "wires": [
            [
                "9a3b7f9.5e6b8"
            ]
        ]
    },
    {
        "id": "9a3b7f9.5e6b8",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1610,
        "y": 140,
        "wires": []
    },
    {
        "id": "1692a27.8368fde",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e7bf2df8.cfa0a",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1190,
        "y": 100,
        "wires": [
            [
                "81f7b446.8c8718"
            ]
        ]
    },
    {
        "id": "81f7b446.8c8718",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "7e0a8361.60fa3c",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 540,
        "wires": [
            [
                "e7c33b5d.af48d8"
            ]
        ]
    },
    {
        "id": "e7c33b5d.af48d8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "4a9286e5.e8f4e8"
            ]
        ]
    },
    {
        "id": "89105352.909da",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "ed38b6eb.ce69b",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 310,
        "y": 480,
        "wires": [
            [
                "4a9286e5.e8f4e8"
            ]
        ]
    },
    {
        "id": "90df249b.c0cbf",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2340,
        "y": 660,
        "wires": []
    },
    {
        "id": "4cbecb3c.bf7ee4",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1370,
        "y": 100,
        "wires": [
            [
                "ef77d89b.b36608"
            ]
        ]
    },
    {
        "id": "ef77d89b.b36608",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "g": "3a58fc05.972e0c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1370,
        "y": 140,
        "wires": []
    },
    {
        "id": "cc1a6775.26469",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 790,
        "y": 780,
        "wires": [
            [
                "1b14a050.631f9"
            ]
        ]
    },
    {
        "id": "34f31521.2b27d2",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "Старт канселятора",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 1180,
        "wires": [
            [
                "160b4dd4.4f8e12"
            ]
        ]
    },
    {
        "id": "93c3bc16.970708",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f8a6e470.166c58",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = msg.payload.bot.floors;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3340,
        "y": 1340,
        "wires": [
            [
                "1509e627.76e8e2",
                "10cdaeb9.a25311"
            ]
        ]
    },
    {
        "id": "1509e627.76e8e2",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3350,
        "y": 1300,
        "wires": []
    },
    {
        "id": "66b556ec.9a6f58",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 1360,
        "wires": []
    },
    {
        "id": "83eb55cb.4546",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 1860,
        "y": 680,
        "wires": []
    },
    {
        "id": "5e6d0362.224584",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "нет запрета на покупку",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "ac559e43.94903"
            ]
        ]
    },
    {
        "id": "168e0396.d38efc",
        "type": "catch",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1380,
        "y": 1680,
        "wires": [
            [
                "c971a180.2a71c8"
            ]
        ]
    },
    {
        "id": "c971a180.2a71c8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f13d409b.6445f8",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1230,
        "y": 1680,
        "wires": [
            [
                "76409bc.077dee4"
            ]
        ]
    },
    {
        "id": "76409bc.077dee4",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1230,
        "y": 1720,
        "wires": []
    },
    {
        "id": "3df007b7.771648",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "339f6357.48270c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 540,
        "wires": []
    },
    {
        "id": "10cdaeb9.a25311",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3490,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "230838f7.7d169",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "buy ордеров нет",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 1280,
        "wires": [
            [
                "ce43fd6d.7b213"
            ]
        ]
    },
    {
        "id": "415a64d7.94e364",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "отменяем ордера на покупку",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 1200,
        "wires": [
            [
                "6efa7034.90b4e"
            ]
        ]
    },
    {
        "id": "8e1f3271.c24088",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = Date.parse(new Date()) / 1000;\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\n\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 720,
        "wires": [
            [
                "7792f18e.f49f5"
            ]
        ]
    },
    {
        "id": "79a93671.4908f",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 388.5714569091797,
        "y": 3204.285919189453,
        "wires": []
    },
    {
        "id": "7a8474f8.a35f2c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "проверяем статусы открытых ордеров на всех этажах",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 1520,
        "wires": [
            [
                "db4dea56.5e575",
                "a836d292.a18c6"
            ]
        ]
    },
    {
        "id": "fb04f823.a3bdd8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1440,
        "wires": []
    },
    {
        "id": "db4dea56.5e575",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "filter all open orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n//msg.bot = msg.payload.bot;\n\n\nlet f = msg.bot.floors;\n\n var openfloors = f.filter(function(floor) {\n     return ((floor[7] == 1) || (floor[7] == 3));\n    });\n\nmsg.bot.openfloors = openfloors;\n\nif (openfloors.length > 0){\n    msg.payload = openfloors;\n    \n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"green\",shape:\"ring\",text:openfloors.length});\n    return [msg, null];\n    \n}\nelse{\n    \n    //>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"blue\",shape:\"ring\",text:openfloors.length});\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 1520,
        "wires": [
            [
                "fb04f823.a3bdd8",
                "cff1b080.040028"
            ],
            [
                "b881a645.5fdc4",
                "355f109f.8ebbb"
            ]
        ]
    },
    {
        "id": "63a1b9e8.5ea0a",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b881a645.5fdc4",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1580,
        "wires": []
    },
    {
        "id": "a836d292.a18c6",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1460,
        "wires": []
    },
    {
        "id": "cff1b080.040028",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1050,
        "y": 1520,
        "wires": [
            [
                "6189b11c.899fd8"
            ]
        ]
    },
    {
        "id": "6189b11c.899fd8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.payload[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 1520,
        "wires": [
            [
                "b731d6be.9f8fc8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b731d6be.9f8fc8",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1480,
        "y": 1520,
        "wires": [
            [
                "e3d41428.60691"
            ]
        ]
    },
    {
        "id": "e3d41428.60691",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "allchecker topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1710,
        "y": 1520,
        "wires": [
            [
                "9705d73c.6e5ca",
                "6ce338e3.82232"
            ]
        ]
    },
    {
        "id": "9705d73c.6e5ca",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1940,
        "y": 1520,
        "wires": [
            [
                "fe358c3e.8ff248"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "2257b76.071d6c8"
            ],
            [
                "4084a396.073304"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "c01705a8.21d418",
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "6ce338e3.82232",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1420,
        "wires": []
    },
    {
        "id": "c01705a8.21d418",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 1660,
        "wires": []
    },
    {
        "id": "19e93a09.89aee6",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2210,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6012c453.cfeffc",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3030,
        "y": 1460,
        "wires": [
            [
                "5c51429d.72e104"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "4084a396.073304",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем покупку\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2280,
        "y": 1480,
        "wires": [
            [
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "5c51429d.72e104",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 3215,
        "y": 1460,
        "wires": []
    },
    {
        "id": "3e6444c9.a2ba14",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "name": "",
        "links": [
            "5c51429d.72e104",
            "fe175d6.982952",
            "68ae7dd9.356844",
            "355f109f.8ebbb"
        ],
        "x": 233.5714569091797,
        "y": 3244.285919189453,
        "wires": [
            [
                "618930a2.3dffb"
            ]
        ]
    },
    {
        "id": "fe175d6.982952",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 2295,
        "y": 1620,
        "wires": []
    },
    {
        "id": "1b8a3dc2.1cbaf2",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2230,
        "y": 1340,
        "wires": []
    },
    {
        "id": "fc774736.1854f8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2770,
        "y": 1440,
        "wires": [
            [
                "68ae7dd9.356844"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2257b76.071d6c8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2280,
        "y": 1380,
        "wires": [
            [
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "68ae7dd9.356844",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 2975,
        "y": 1360,
        "wires": []
    },
    {
        "id": "355f109f.8ebbb",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 1015,
        "y": 1580,
        "wires": []
    },
    {
        "id": "3ff7fc13.f3a62c",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1498.5714569091797,
        "y": 3004.285919189453,
        "wires": []
    },
    {
        "id": "fe358c3e.8ff248",
        "type": "join",
        "z": "38c422f8.b82bf6",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2570,
        "y": 1800,
        "wires": [
            [
                "fc774736.1854f8"
            ]
        ]
    },
    {
        "id": "ed3ebb40.401b98",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1268.5714569091797,
        "y": 2864.285919189453,
        "wires": []
    },
    {
        "id": "f053413b.f6608",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1188.5714569091797,
        "y": 3004.285919189453,
        "wires": []
    },
    {
        "id": "7ecf7e00.a0d31",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2208.5714569091797,
        "y": 2884.285919189453,
        "wires": []
    },
    {
        "id": "650ece50.fb118",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4bec0d5b.469514",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "Functions",
        "info": "",
        "x": 160,
        "y": 80,
        "wires": []
    },
    {
        "id": "5f90666a.62c228",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "d": true,
        "g": "945a2cf3.e1d6b8",
        "name": "updateSettings()",
        "func": "\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nlet updateSettings = function (newset = msg.payload, topic = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \nmsg.topic = topic;\nmsg.payload = newset;\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n    \n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('updateSettings', updateSettings);\n\n",
        "finalize": "",
        "x": 380,
        "y": 140,
        "wires": [
            [
                "5a6c84db.e2549c"
            ]
        ]
    },
    {
        "id": "52aaa619.191ba8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "d": true,
        "g": "945a2cf3.e1d6b8",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "2fe76646.8b5a0a",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "botid, newset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "5f90666a.62c228"
            ]
        ]
    },
    {
        "id": "5a6c84db.e2549c",
        "type": "http request",
        "z": "38c422f8.b82bf6",
        "d": true,
        "g": "945a2cf3.e1d6b8",
        "name": "",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/bots/{{{topic}}}",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "52aaa619.191ba8"
            ]
        ]
    },
    {
        "id": "f29872c6.957f88",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "botname",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "abce4774.171ad8"
            ]
        ]
    },
    {
        "id": "41a863d8.9f125c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "abce4774.171ad8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "ttpget()",
        "func": "\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet ttpget = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\nmsg.topic = botname;\nmsg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('ttpget', ttpget);\n",
        "finalize": "",
        "x": 360,
        "y": 180,
        "wires": [
            [
                "7e390ec5.73031"
            ]
        ]
    },
    {
        "id": "7e390ec5.73031",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "41a863d8.9f125c"
            ]
        ]
    },
    {
        "id": "1c21e572.487e03",
        "type": "redis-instance",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "ttp",
        "location": "flow",
        "x": 730,
        "y": 80,
        "wires": []
    },
    {
        "id": "4dd8ae72.bac7a8",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "bot id, floor id",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "645bd981.f21eb"
            ]
        ]
    },
    {
        "id": "645bd981.f21eb",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "check floor",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "cfa961f2.56de9",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "user id, moneta, order id",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "a9c4dd18.15e2d8"
            ]
        ]
    },
    {
        "id": "a9c4dd18.15e2d8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "get order status",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getorderstatus = function (userid = msg.payload.userid, moneta = msg.payload.moneta, orderid = msg.payload.orderid) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \nmsg.payload = [];\nmsg.topic = \"orders-status-\" + userid + \":\" + moneta + \":\" + orderid;\n\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getorderstatus', getorderstatus);",
        "finalize": "",
        "x": 440,
        "y": 260,
        "wires": [
            [
                "93e330da.07ba58"
            ]
        ]
    },
    {
        "id": "93e330da.07ba58",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "7a1798ac.2961e"
            ]
        ]
    },
    {
        "id": "7a1798ac.2961e",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 260,
        "wires": []
    },
    {
        "id": "e7d6b6d2.32065",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 1240,
        "wires": []
    },
    {
        "id": "cecfe42a.4e6e6",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "getprice()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getprice = function (moneta = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"prices:\"+moneta;\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getprice', getprice);",
        "finalize": "",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "cedee7.bd3d7118"
            ]
        ]
    },
    {
        "id": "73a29c92.5b5454",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "moneta",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "cecfe42a.4e6e6"
            ]
        ]
    },
    {
        "id": "79993aa4.dfacbc",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb\",\n\tAPISECRET: \"AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh\",\n\t\"reconnect\": false,\n    'useServerTime': true,\n    \n});\n\n\n//'options': {\n//        'adjustForTimeDifference': true,\n//        'verbose': true, // if needed, not mandatory\n//        'recvWindow': 10000000, // not really needed\n//    }\n\n \n\n\nlet moneta = \"ALPHAUSDT\";\nlet quantity = Number(100);\nlet price = Number(0.137);\nnode.warn(quantity);\nnode.warn(moneta);\nnode.warn(price);\n//msg.payload = \"qjson.status\";\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp.orderId;\n        msg.payload = resp.orderId;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n    }\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.warn(err);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1190,
        "y": 2140,
        "wires": [
            [
                "22d68da.a1e6b72"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "22d68da.a1e6b72",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2140,
        "wires": []
    },
    {
        "id": "82cda584.ee441",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 960,
        "y": 2140,
        "wires": [
            [
                "79993aa4.dfacbc"
            ]
        ]
    },
    {
        "id": "5f7b2c5a.9d3d7c",
        "type": "telegrambot-command",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "command": "/ee",
        "commandType": "str",
        "commandCase": false,
        "x": 3690,
        "y": 1580,
        "wires": [
            [
                "2214cec4.51c6ca"
            ]
        ]
    },
    {
        "id": "2214cec4.51c6ca",
        "type": "telegrambot-switch",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "question": "Продолжаем?",
        "answers": [
            "Да",
            "Нет"
        ],
        "outputs": 2,
        "autoAnswerCallback": true,
        "timeoutValue": "",
        "timeoutUnits": "",
        "x": 3970,
        "y": 1560,
        "wires": [
            [
                "2bb185ac.27b372"
            ],
            [
                "2fb7115.58b99ee"
            ]
        ]
    },
    {
        "id": "4baf433c.d3da5c",
        "type": "telegrambot-notify",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 3860,
        "y": 1060,
        "wires": []
    },
    {
        "id": "821b304c.c174e",
        "type": "telegrambot-notify",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 3960,
        "y": 1140,
        "wires": []
    },
    {
        "id": "71d733f8.94a534",
        "type": "telegrambot-notify",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 4380,
        "y": 1500,
        "wires": []
    },
    {
        "id": "5d212be8.4ed244",
        "type": "telegrambot-notify",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 4360,
        "y": 1600,
        "wires": []
    },
    {
        "id": "3b4eeea5.7a8182",
        "type": "telegrambot-payload",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "sendMethod": "sendChatAction",
        "payload": "",
        "x": 4240,
        "y": 1040,
        "wires": [
            [
                "cbf21da8.d49678"
            ]
        ]
    },
    {
        "id": "b11492ad.95df",
        "type": "flow-asserter in",
        "z": "38c422f8.b82bf6",
        "name": "",
        "testcases": [
            {
                "testId": 0,
                "input": "a",
                "inputType": "str",
                "operator": "eq",
                "assert": "aq",
                "assertType": "str"
            }
        ],
        "onlyfail": true,
        "flowasserterout": "9e86c3f7.3e3468",
        "x": 3780,
        "y": 1960,
        "wires": [
            [
                "b8f09340.eee248"
            ],
            [
                "aaa8d68e.331fb"
            ]
        ]
    },
    {
        "id": "9e86c3f7.3e3468",
        "type": "flow-asserter out",
        "z": "38c422f8.b82bf6",
        "name": "",
        "x": 4370,
        "y": 1920,
        "wires": [
            [
                "b8d69f.2c77696"
            ]
        ]
    },
    {
        "id": "3a977adc.3407ce",
        "type": "filter",
        "z": "38c422f8.b82bf6",
        "name": "",
        "property": "payload[7]",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num",
                "output": 1
            },
            {
                "t": "null",
                "output": 2
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3630,
        "y": 1340,
        "wires": [
            [
                "93c3bc16.970708"
            ],
            [
                "66b556ec.9a6f58"
            ]
        ]
    },
    {
        "id": "8295ad7c.f2478",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 1920,
        "wires": [
            [
                "fe4ae18a.e1e7e8"
            ]
        ]
    },
    {
        "id": "bc345a7e.9957a",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 1920,
        "wires": []
    },
    {
        "id": "fe4ae18a.e1e7e8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "msg.payload = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1920,
        "wires": [
            [
                "bc345a7e.9957a"
            ]
        ]
    },
    {
        "id": "57f19e7e.80bda8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare getprice",
        "func": "\n//let moneta = msg.payload.bot.settings.moneta;\n//msg.bot = msg.payload.bot;\n\nmoneta= msg.payload;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 2000,
        "wires": [
            [
                "6abc1431.054344"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6abc1431.054344",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1220,
        "y": 2000,
        "wires": [
            [
                "5bb7d1e3.a1b68"
            ]
        ]
    },
    {
        "id": "5bb7d1e3.a1b68",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2000,
        "wires": []
    },
    {
        "id": "77ee5008.3a0d68",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 820,
        "y": 2000,
        "wires": [
            [
                "57f19e7e.80bda8"
            ]
        ]
    },
    {
        "id": "34e1566a.fe282a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb\",\n\tAPISECRET: \"AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh\",\n\t\"reconnect\": false,\n    'useServerTime': true,\n    \n});\n\n\n//'options': {\n//        'adjustForTimeDifference': true,\n//        'verbose': true, // if needed, not mandatory\n//        'recvWindow': 10000000, // not really needed\n//    }\n\n \n\n\nlet moneta = \"ALPHAUSDT\";\nlet quantity = Number(100);\nlet price = Number(0.137);\nnode.warn(quantity);\nnode.warn(moneta);\nnode.warn(price);\n//msg.payload = \"qjson.status\";\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp.orderId;\n        msg.payload = resp.orderId;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n    }\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.warn(err);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 3360,
        "wires": [
            [
                "2ec21dae.6f5322"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "2ec21dae.6f5322",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 3360,
        "wires": []
    },
    {
        "id": "668fe2df.5f9904",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1040,
        "y": 3360,
        "wires": [
            [
                "34e1566a.fe282a"
            ]
        ]
    },
    {
        "id": "27518c71.378094",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1040,
        "y": 3200,
        "wires": [
            [
                "20c4bf6b.e3b69"
            ]
        ]
    },
    {
        "id": "6729f2a9.4470b4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 3200,
        "wires": []
    },
    {
        "id": "20c4bf6b.e3b69",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "current time",
        "func": "msg.payload = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 3200,
        "wires": [
            [
                "6729f2a9.4470b4"
            ]
        ]
    },
    {
        "id": "540d66e2.52f558",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare getprice",
        "func": "\n//let moneta = msg.payload.bot.settings.moneta;\n//msg.bot = msg.payload.bot;\n\nmoneta= msg.payload;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1240,
        "y": 3280,
        "wires": [
            [
                "90c5df5.f6159a"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "90c5df5.f6159a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1440,
        "y": 3280,
        "wires": [
            [
                "4f02ed0f.f40ee4"
            ]
        ]
    },
    {
        "id": "4f02ed0f.f40ee4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 3280,
        "wires": []
    },
    {
        "id": "509f1931.8d0b28",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 1040,
        "y": 3280,
        "wires": [
            [
                "540d66e2.52f558"
            ]
        ]
    },
    {
        "id": "cedee7.bd3d7118",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 300,
        "wires": [
            [
                "829d56ef.f0827"
            ]
        ]
    },
    {
        "id": "829d56ef.f0827",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "945a2cf3.e1d6b8",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "6a077525.6f310c",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 280,
        "y": 1820,
        "wires": [
            [
                "3c8f0770.75854"
            ]
        ]
    },
    {
        "id": "3c8f0770.75854",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "getprice",
        "func": "\nlet moneta = msg.payload;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.payload = gp;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 1820,
        "wires": [
            [
                "83e90d1d.39801"
            ]
        ]
    },
    {
        "id": "83e90d1d.39801",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1820,
        "wires": []
    },
    {
        "id": "8c51dfe6.41bf1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getprice = function (moneta = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"prices:\"+moneta;\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getprice', getprice);",
        "finalize": "",
        "x": 900,
        "y": 60,
        "wires": [
            [
                "9d5e1703.2251f8"
            ]
        ]
    },
    {
        "id": "456373bf.34e8d4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "moneta",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 60,
        "wires": [
            [
                "8c51dfe6.41bf1"
            ]
        ]
    },
    {
        "id": "9d5e1703.2251f8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "88d1f442.5d291"
            ]
        ]
    },
    {
        "id": "88d1f442.5d291",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 60,
        "wires": []
    },
    {
        "id": "fdc8dc79.4afd5",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 2100,
        "y": 3240,
        "wires": [
            [
                "7bb4ae52.b1d468"
            ]
        ]
    },
    {
        "id": "7bb4ae52.b1d468",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice",
        "func": "\nlet moneta = msg.payload;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.payload = gp;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2300,
        "y": 3240,
        "wires": [
            [
                "42a69b7a.7442d4"
            ]
        ]
    },
    {
        "id": "42a69b7a.7442d4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 3240,
        "wires": []
    },
    {
        "id": "506a8391.c574dc",
        "type": "http in",
        "z": "5df15275.2888ec",
        "name": "",
        "url": "/botcreate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2320,
        "y": 40,
        "wires": [
            [
                "5331f2f3.26e314",
                "b876d5aa.b5314",
                "1180bcc7.96539b",
                "74dd9f83.8b4a38",
                "890bff65.ae92a",
                "c18bfab4.a6c398",
                "634b7ee.4a33b8",
                "5c218091.24dc2",
                "8a90f52f.5e82b8"
            ]
        ]
    },
    {
        "id": "31e84ef9.15d452",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2790,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5331f2f3.26e314",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2560,
        "y": 100,
        "wires": [
            [
                "31e84ef9.15d452"
            ]
        ]
    },
    {
        "id": "50198026.187798",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "register guid",
        "func": "let guid = msg.payload;\nglobal.set('guid',guid);\n\nlet botlistname = guid+\"-botlist\";\nglobal.set('guid',guid);\nglobal.set(botlistname,[]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c866516d.ec8d7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "50198026.187798"
            ]
        ]
    },
    {
        "id": "bca0f523.f10a5",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_status = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":status\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_status', getbot_status);",
        "finalize": "",
        "x": 320,
        "y": 240,
        "wires": [
            [
                "d5710ed3.1f0ed8"
            ]
        ]
    },
    {
        "id": "9929a915.a7192",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "bca0f523.f10a5"
            ]
        ]
    },
    {
        "id": "84fc47b3.40a288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 240,
        "wires": []
    },
    {
        "id": "338b53fe.bad3b4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BNBUSDT-1606062710",
        "payloadType": "str",
        "x": 2120,
        "y": 3140,
        "wires": [
            [
                "984c0eb9.874e48"
            ]
        ]
    },
    {
        "id": "984c0eb9.874e48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot",
        "func": "\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2370,
        "y": 3140,
        "wires": [
            [
                "625fa757.6ddd8",
                "f509bf72.00e618"
            ]
        ]
    },
    {
        "id": "625fa757.6ddd8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2580,
        "y": 3140,
        "wires": []
    },
    {
        "id": "72938161.c1d328",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getbotlist = function (guid = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbotlist', getbotlist);",
        "finalize": "",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "2e79e684.725d42"
            ]
        ]
    },
    {
        "id": "39200d24.d193aa",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "guid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "72938161.c1d328"
            ]
        ]
    },
    {
        "id": "2e79e684.725d42",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get botlist",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 180,
        "wires": [
            [
                "6d61a71c.3be1e"
            ]
        ]
    },
    {
        "id": "6d61a71c.3be1e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "1aa4adeb.16a03a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 2180,
        "y": 3320,
        "wires": [
            [
                "a7ab24c2.b685e8"
            ]
        ]
    },
    {
        "id": "a7ab24c2.b685e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2400,
        "y": 3320,
        "wires": [
            [
                "d8a96fea.e8a12"
            ]
        ]
    },
    {
        "id": "d8a96fea.e8a12",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 3320,
        "wires": []
    },
    {
        "id": "b876d5aa.b5314",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2540,
        "y": 160,
        "wires": [
            [
                "193726e9.3199d9"
            ]
        ]
    },
    {
        "id": "193726e9.3199d9",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2740,
        "y": 160,
        "wires": [
            [
                "c1a0c26f.ded73"
            ]
        ]
    },
    {
        "id": "c1a0c26f.ded73",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\n\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2940,
        "y": 160,
        "wires": [
            [
                "7c1162f3.2e02bc"
            ]
        ]
    },
    {
        "id": "7c1162f3.2e02bc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1180bcc7.96539b",
        "type": "http response",
        "z": "5df15275.2888ec",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2500,
        "y": 40,
        "wires": []
    },
    {
        "id": "754f373f.b15518",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 510,
        "y": 920,
        "wires": [
            [
                "8f2b992a.2a5888"
            ]
        ]
    },
    {
        "id": "444e001d.21432",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "Расчет МА",
        "info": "",
        "x": 130,
        "y": 860,
        "wires": []
    },
    {
        "id": "5d94f71d.d3668",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 980,
        "wires": [
            [
                "edea6dff.e44"
            ]
        ]
    },
    {
        "id": "edea6dff.e44",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 250,
        "y": 980,
        "wires": [
            [
                "754f373f.b15518"
            ]
        ]
    },
    {
        "id": "1e4c98d9.ba7367",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 920,
        "wires": [
            [
                "c982d578.5cca4"
            ]
        ]
    },
    {
        "id": "c982d578.5cca4",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 270,
        "y": 920,
        "wires": [
            [
                "754f373f.b15518"
            ]
        ]
    },
    {
        "id": "eda0b98c.624f38",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1700,
        "wires": [
            [
                "dda68ce4.be4548"
            ]
        ]
    },
    {
        "id": "dda68ce4.be4548",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 630,
        "y": 1740,
        "wires": []
    },
    {
        "id": "33a98cf6.520fbc",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1700,
        "wires": [
            [
                "cd451268.3a6058"
            ]
        ]
    },
    {
        "id": "cd451268.3a6058",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 210,
        "y": 1740,
        "wires": []
    },
    {
        "id": "14fd3fa0.82928",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 1700,
        "wires": [
            [
                "7cd3ed75.b496ac"
            ]
        ]
    },
    {
        "id": "7cd3ed75.b496ac",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 390,
        "y": 1740,
        "wires": []
    },
    {
        "id": "c3e2eace.6fef4",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "Старт трека",
        "info": "",
        "x": 130,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f88e6307.876b78",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 480,
        "y": 1200,
        "wires": [
            [
                "d43a0074.4523c"
            ]
        ]
    },
    {
        "id": "3e3a1491.e31a74",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 270,
        "y": 1200,
        "wires": [
            [
                "f88e6307.876b78"
            ]
        ]
    },
    {
        "id": "fb84e297.7e169",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 250,
        "y": 1260,
        "wires": [
            [
                "f88e6307.876b78"
            ]
        ]
    },
    {
        "id": "8275986.8fc5d68",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "fb84e297.7e169"
            ]
        ]
    },
    {
        "id": "97442da1.47403",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 1140,
        "wires": [
            [
                "d6651eda.7b83"
            ]
        ]
    },
    {
        "id": "c0dcb78d.280fb",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "3e3a1491.e31a74"
            ]
        ]
    },
    {
        "id": "da741b09.f3974",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 530,
        "y": 1140,
        "wires": [
            [
                "97442da1.47403"
            ]
        ]
    },
    {
        "id": "3201780f.c931f",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2000,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d43a0074.4523c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 1200,
        "wires": [
            [
                "d6651eda.7b83"
            ]
        ]
    },
    {
        "id": "133c3e4a.687a62",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a7ef7b74.1301e8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2520,
        "y": 1140,
        "wires": []
    },
    {
        "id": "90d93514.efa9e8",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 550,
        "y": 980,
        "wires": [
            [
                "24812b74.9bc644"
            ]
        ]
    },
    {
        "id": "f509bf72.00e618",
        "type": "json",
        "z": "5df15275.2888ec",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2590,
        "y": 3100,
        "wires": [
            [
                "b0bce207.3e7de8"
            ]
        ]
    },
    {
        "id": "b0bce207.3e7de8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730,
        "y": 3120,
        "wires": []
    },
    {
        "id": "7b1b57ca.c72288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "register keypar",
        "func": "let key = msg.key;\nlet secret = msg.secret\nglobal.set('key',key);\nglobal.set('secret',secret);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "36430d18.7c1cea",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "my keypair",
        "props": [
            {
                "p": "key",
                "v": "m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb",
                "vt": "str"
            },
            {
                "p": "secret",
                "v": "AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "7b1b57ca.c72288"
            ]
        ]
    },
    {
        "id": "7ee8ada7.9818bc",
        "type": "catch",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "bc481bc2.f1ae08",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2620,
        "y": 1440,
        "wires": [
            [
                "e0440623.2ec6e"
            ]
        ]
    },
    {
        "id": "e0440623.2ec6e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 1440,
        "wires": []
    },
    {
        "id": "cba3e711.97d4a8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5fb1865f2798e90177ca1e60",
        "payloadType": "str",
        "x": 2630,
        "y": 1620,
        "wires": [
            [
                "c23f0bc3.badbc"
            ]
        ]
    },
    {
        "id": "c23f0bc3.badbc",
        "type": "graphql",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "get bot all data",
        "graphql": "ab190c2e.90269",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "query {\n  bot (id: \"{{payload}}\"){\n    id\n    settings\n    sales\n    floors\n    status\n    finance\n    ttp\n    start_set\n\n  }\n}",
        "x": 2790,
        "y": 1620,
        "wires": [
            [
                "b0b01bc4.45a1e8"
            ],
            []
        ]
    },
    {
        "id": "6eb4d4b9.112f6c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 1620,
        "wires": []
    },
    {
        "id": "b0b01bc4.45a1e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "reset to start_settings",
        "func": "let id = msg.payload.bot.id;\nlet newsetb = {\n    \"settings\":msg.payload.bot.start_set.settings,\n    \"sales\":msg.payload.bot.start_set.sales,\n    \"floors\":msg.payload.bot.start_set.floors,\n    \"status\":msg.payload.bot.start_set.status,\n    \"finance\":msg.payload.bot.start_set.finance,\n    \"ttp\":msg.payload.bot.start_set.ttp\n};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n\n\nconst upd = global.get('updateSettings')(msg.payload, id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3020,
        "y": 1620,
        "wires": [
            [
                "6eb4d4b9.112f6c"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a359f524.2e00e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "get flow.track",
        "func": "\n//<трекер<\nlet track = flow.get(\"track\");\nlet start_node_time = Date.parse(new Date())/1000;\nlet steptitle = node.name;\n//>трекер>\n\nmsg.payload = track;\n\n//<трекер< \n //   let end_node_time = Date.parse(new Date())/1000;\n //   let duration = end_node_time-start_node_time;\n //   track.push([steptitle,start_node_time,end_node_time,duration]);\n //   msg.track = track;\n //   flow.set(\"track\", track);\n//>трекер>\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2820,
        "y": 1560,
        "wires": [
            [
                "a0142b1a.f25d9",
                "941fc9d2.76b05"
            ]
        ]
    },
    {
        "id": "cf20b67b.cbc6e",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2520,
        "y": 1500,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "a0142b1a.f25d9",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1520,
        "wires": []
    },
    {
        "id": "941fc9d2.76b05",
        "type": "ui_table",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 2,
        "width": "14",
        "height": "9",
        "columns": [
            {
                "field": "steptitle",
                "title": "steptitle",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_node",
                "title": "duration_node",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_step",
                "title": "duration_step",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2990,
        "y": 1560,
        "wires": []
    },
    {
        "id": "8040b017.7a26f8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "Отладка",
        "info": "",
        "x": 3190,
        "y": 1460,
        "wires": []
    },
    {
        "id": "189b2b68.7c485d",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2410,
        "y": 1560,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "842e37da.0d09",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 2270,
        "y": 1560,
        "wires": [
            [
                "189b2b68.7c485d"
            ]
        ]
    },
    {
        "id": "74dd9f83.8b4a38",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2550,
        "y": 220,
        "wires": [
            [
                "1ee92671.77db3a"
            ]
        ]
    },
    {
        "id": "1ee92671.77db3a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2770,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "890bff65.ae92a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\n\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2560,
        "y": 280,
        "wires": [
            [
                "7be2e3c6.f4f0dc"
            ]
        ]
    },
    {
        "id": "7be2e3c6.f4f0dc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2790,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c18bfab4.a6c398",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\nmsg.payload = msg.payload.ttp;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2540,
        "y": 340,
        "wires": [
            [
                "4a2da56.007bbdc"
            ]
        ]
    },
    {
        "id": "4a2da56.007bbdc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2750,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "634b7ee.4a33b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2550,
        "y": 400,
        "wires": [
            [
                "a2076fe3.e1e4c8"
            ]
        ]
    },
    {
        "id": "a2076fe3.e1e4c8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2750,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d5710ed3.1f0ed8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "84fc47b3.40a288"
            ]
        ]
    },
    {
        "id": "82c581f1.3d7b2",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_settingss()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_settings = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":settings\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_settings', getbot_settings);",
        "finalize": "",
        "x": 330,
        "y": 300,
        "wires": [
            [
                "de421236.7ddad8"
            ]
        ]
    },
    {
        "id": "4e808ea9.9699f8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "82c581f1.3d7b2"
            ]
        ]
    },
    {
        "id": "c996e15f.6cd09",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "de421236.7ddad8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 300,
        "wires": [
            [
                "c996e15f.6cd09"
            ]
        ]
    },
    {
        "id": "5c218091.24dc2",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2550,
        "y": 460,
        "wires": [
            [
                "d9152924.0b6fa"
            ]
        ]
    },
    {
        "id": "d9152924.0b6fa",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2770,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea27905.a93e8e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_ttp = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttp\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_ttp', getbot_ttp);",
        "finalize": "",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "dc63781f.d7f54"
            ]
        ]
    },
    {
        "id": "c419c89c.c82b7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "3ea27905.a93e8e"
            ]
        ]
    },
    {
        "id": "ee122abb.ffdf2",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "dc63781f.d7f54",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot ttp",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "ee122abb.ffdf2"
            ]
        ]
    },
    {
        "id": "e12b76fa.94dc68",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_onoff()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_onoff = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":onoff\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_onoff', getbot_onoff);",
        "finalize": "",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "225135a2.08288a"
            ]
        ]
    },
    {
        "id": "e1b6a373.027e3",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "e12b76fa.94dc68"
            ]
        ]
    },
    {
        "id": "be80ac0a.3fcc6",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "225135a2.08288a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot onoff",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 420,
        "wires": [
            [
                "be80ac0a.3fcc6"
            ]
        ]
    },
    {
        "id": "32fd021f.9c3646",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_busy = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_busy', getbot_busy);",
        "finalize": "",
        "x": 320,
        "y": 480,
        "wires": [
            [
                "5a0e3510.93269c"
            ]
        ]
    },
    {
        "id": "dce2a78c.7fb6c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "32fd021f.9c3646"
            ]
        ]
    },
    {
        "id": "22c83041.c57288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "5a0e3510.93269c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot busy",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "22c83041.c57288"
            ]
        ]
    },
    {
        "id": "274d4375.725ad4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet setbotlist = function (guid = msg.payload.guid, botlist = msg.payload.botlist) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = botlist;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbotlist', setbotlist);",
        "finalize": "",
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "ba3e6008.7e12f8"
            ]
        ]
    },
    {
        "id": "dfdf853a.fea128",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "guid, botlist",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 180,
        "wires": [
            [
                "274d4375.725ad4"
            ]
        ]
    },
    {
        "id": "fc027fe9.e8d708",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 180,
        "wires": []
    },
    {
        "id": "6aa6ef74.4faa48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update botlist",
        "func": "\nconst upd = global.get('setbotlist')(msg.guid, msg.botlist);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n  \n\n\nnode.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n    node.done();\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1880,
        "y": 180,
        "wires": [
            [
                "25718b98.c9e26c"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "25718b98.c9e26c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 180,
        "wires": []
    },
    {
        "id": "ba3e6008.7e12f8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "set botlist",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1260,
        "y": 180,
        "wires": [
            [
                "fc027fe9.e8d708"
            ]
        ]
    },
    {
        "id": "9114d0ec.174ba8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "guid",
                "v": "",
                "vt": "date"
            },
            {
                "p": "botlist",
                "v": "[dd,ff]",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1730,
        "y": 180,
        "wires": [
            [
                "6aa6ef74.4faa48"
            ]
        ]
    },
    {
        "id": "3c92a9f.7208756",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_status = function (botname = msg.topic, status = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = status;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_status', setbot_status);",
        "finalize": "",
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "3b3eb9c4.74e1ce"
            ]
        ]
    },
    {
        "id": "1bdf10d4.260a9f",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname, status",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "3c92a9f.7208756"
            ]
        ]
    },
    {
        "id": "4a190c44.e49f5c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 240,
        "wires": []
    },
    {
        "id": "3b3eb9c4.74e1ce",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "4a190c44.e49f5c"
            ]
        ]
    },
    {
        "id": "2508abe7.d6a684",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_busy = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n     msg.topic = guid+\"-bots:\"+botname+\":busy\";;\n    msg.payload = \"true\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_busy', setbot_busy);",
        "finalize": "",
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "38fe7af7.4b2106"
            ]
        ]
    },
    {
        "id": "f728a67.fc3a3d8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "2508abe7.d6a684"
            ]
        ]
    },
    {
        "id": "fd75bbec.1aee88",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 460,
        "wires": []
    },
    {
        "id": "38fe7af7.4b2106",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 460,
        "wires": [
            [
                "fd75bbec.1aee88"
            ]
        ]
    },
    {
        "id": "2c78facb.36c40e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 640,
        "wires": []
    },
    {
        "id": "918fa2bb.530f7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "BNBUSDT-1606077321",
        "x": 1650,
        "y": 680,
        "wires": [
            [
                "4df04d1f.b4def4"
            ]
        ]
    },
    {
        "id": "4df04d1f.b4def4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_busy",
        "func": "\nconst upd = global.get('setbot_busy')(msg.topic);\n\nupd.then(upd => {\n\n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});  \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1890,
        "y": 660,
        "wires": [
            [
                "2c78facb.36c40e"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "c458d7d.41524a8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_free()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_free = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-bots:\"+botname+\":busy\";;\n    msg.payload = \"false\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_free', setbot_free);",
        "finalize": "",
        "x": 1110,
        "y": 520,
        "wires": [
            [
                "1ecd91cb.e68c46"
            ]
        ]
    },
    {
        "id": "c9147459.15de58",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 520,
        "wires": [
            [
                "c458d7d.41524a8"
            ]
        ]
    },
    {
        "id": "b9afe11.e8147a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 520,
        "wires": []
    },
    {
        "id": "1ecd91cb.e68c46",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 520,
        "wires": [
            [
                "b9afe11.e8147a"
            ]
        ]
    },
    {
        "id": "d6651eda.7b83",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbotlist",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[0];\n\n    let last_node_end_time = laststep.end_node_time;\n\n//>трекер>\n\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "dfa11988.0cfa6",
                "bec7265d.ad8278"
            ]
        ]
    },
    {
        "id": "dfa11988.0cfa6",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 970,
        "y": 1200,
        "wires": [
            [
                "9a76b6bf.1016d"
            ]
        ]
    },
    {
        "id": "9a76b6bf.1016d",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 1200,
        "wires": [
            [
                "fe2a6027.b22b48"
            ]
        ]
    },
    {
        "id": "fe2a6027.b22b48",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbot_onoff",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 1200,
        "wires": [
            [
                "4bd2ed9.fa5d114"
            ]
        ]
    },
    {
        "id": "4bd2ed9.fa5d114",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1420,
        "y": 1200,
        "wires": [
            [
                "a790f90b.998d8"
            ]
        ]
    },
    {
        "id": "a790f90b.998d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbot_busy",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst gb = global.get('getbot_busy')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1590,
        "y": 1200,
        "wires": [
            [
                "b080e3fb.60616"
            ]
        ]
    },
    {
        "id": "b080e3fb.60616",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "busy === false ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nif (msg.payload === false) {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null];\n}\n\nelse {\n\n    let id = msg.botname;\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 4) {\n        const upd = global.get('setbot_free')(id);\n\n        upd.then(upd => {\n            \n            //>трекер>\n                let end_node_time = new Date().getTime();\n                let duration = end_node_time - start_node_time;\n                let duration_step = end_node_time - last_node_end_time;\n                track.push({\n                    \"steptitle\": steptitle+\"-reset\",\n                    \"start_node_time\": start_node_time,\n                    \"end_node_time\": end_node_time,\n                    \"duration\": duration,\n                    \"duration_step\": duration_step,\n                });\n                flow.set(\"track\", track);\n            //>трекер>\n            node.status({fill:\"red\",shape:\"dot\"});\n            \n            flow.set(id, 0);\n            node.warn(\"reset busy:\" + id);\n\n        }).catch(error => {\n            node.error(error);\n        });\n\n    }\n    flow.set(id, count);\n    return [null, msg];\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1780,
        "y": 1200,
        "wires": [
            [
                "cec096cd.d93358"
            ],
            [
                "5bbb44fa.ec4574"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "40175d8a.67b97c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "8ada0320.0af298"
        ],
        "x": 2155,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8ada0320.0af298",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "40175d8a.67b97c"
        ],
        "x": 115,
        "y": 1500,
        "wires": [
            [
                "95a19c1d.39bae",
                "af44b4f3.4b59e8"
            ]
        ]
    },
    {
        "id": "14ffa955.ed6edf",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "256455f.6de7caa",
            "373cb204.5f5efe"
        ],
        "x": 1735,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9f82a757.25f3d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    \n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n    \n    let duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_track //только для финишной ноды\n        });\n        flow.set(\"track\", track);\n        \n        flow.set(msg.botname, 0);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2530,
        "y": 1200,
        "wires": [
            [
                "133c3e4a.687a62",
                "51b45a57.49dad4",
                "a359f524.2e00e8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "bec7265d.ad8278",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cec096cd.d93358",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "setbot_busy",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst upd = global.get('setbot_busy')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1990,
        "y": 1200,
        "wires": [
            [
                "40175d8a.67b97c",
                "be118eed.3c8348"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "be118eed.3c8348",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5bbb44fa.ec4574",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fde6293c.43f6a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    node.warn(last_node_end_time);\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3070,
        "y": 3320,
        "wires": [
            [
                "a9a43381.7fb07"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6424a7a9.fde1e",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "botname",
                "v": "BNBUSDT-1606088829",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2820,
        "y": 3320,
        "wires": [
            [
                "fde6293c.43f6a"
            ]
        ]
    },
    {
        "id": "a9a43381.7fb07",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3260,
        "y": 3320,
        "wires": []
    },
    {
        "id": "51b45a57.49dad4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "duration",
        "func": "\nlet track = flow.get(\"track\");\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 1240,
        "wires": [
            [
                "51350500.94f214",
                "1d3cd462.fdc43c"
            ]
        ]
    },
    {
        "id": "51350500.94f214",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 1280,
        "wires": []
    },
    {
        "id": "1d3cd462.fdc43c",
        "type": "ui_chart",
        "z": "5df15275.2888ec",
        "name": "",
        "group": "a328c3be.7f91c8",
        "order": 0,
        "width": "14",
        "height": "4",
        "label": "chart1",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "15",
        "removeOlderPoints": "40",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 2930,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "24812b74.9bc644",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "start MA calc",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 980,
        "wires": [
            [
                "54724e9d.5a21d8"
            ]
        ]
    },
    {
        "id": "54724e9d.5a21d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbotlist",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[0];\n\n    let last_node_end_time = laststep.end_node_time;\n\n//>трекер>\n\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 920,
        "wires": [
            [
                "5beb39ef.f84b7"
            ]
        ]
    },
    {
        "id": "5beb39ef.f84b7",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "a707b53d.3343e"
            ]
        ]
    },
    {
        "id": "a707b53d.3343e",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1170,
        "y": 920,
        "wires": [
            [
                "2ac45d8.4ea1022"
            ]
        ]
    },
    {
        "id": "2ac45d8.4ea1022",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_onoff",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 920,
        "wires": [
            [
                "fe43ccbb.7a083"
            ]
        ]
    },
    {
        "id": "fe43ccbb.7a083",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1480,
        "y": 920,
        "wires": [
            [
                "b72aec1b.3ff6d"
            ]
        ]
    },
    {
        "id": "8f2b992a.2a5888",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "start MA calc",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 920,
        "wires": [
            [
                "54724e9d.5a21d8"
            ]
        ]
    },
    {
        "id": "3d3d989e.3a00f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "get candlestick",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n // console.info(\"candlesticks()\", ticks);\n // let last_tick = ticks[ticks.length - 1];\n // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n  //console.info(symbol+\" last close: \"+close);\n  msg.payload = ticks;\n  \n  node.send(msg);\n  return;\n  \n}, {limit: deep});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2100,
        "y": 920,
        "wires": [
            [
                "a2a98d92.7d7ac8"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "a2a98d92.7d7ac8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "расчет MA",
        "func": "let candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2290,
        "y": 920,
        "wires": [
            [
                "2ffac69a.1af06a"
            ]
        ]
    },
    {
        "id": "2ffac69a.1af06a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "prepare update bot status",
        "func": "msg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\n\nmsg.payload = JSON.stringify(msg.bot.status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 920,
        "wires": [
            [
                "f00f32f3.dec218"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "b72aec1b.3ff6d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1660,
        "y": 920,
        "wires": [
            [
                "36be307e.92e14"
            ]
        ]
    },
    {
        "id": "36be307e.92e14",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n\n\n    msg.bot.status = JSON.parse(gb);\n //   msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1880,
        "y": 920,
        "wires": [
            [
                "3d3d989e.3a00f"
            ]
        ]
    },
    {
        "id": "f00f32f3.dec218",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "setbot_status",
        "func": "\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});  \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2760,
        "y": 920,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a911e390.b5d95",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.bot.status.currentprice = gp;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "cb37028d.66ec4"
            ]
        ]
    },
    {
        "id": "cb37028d.66ec4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare update bot status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\n\nmsg.payload = JSON.stringify(msg.bot.status);\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 1500,
        "wires": [
            [
                "302b86fd.feef2a"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e44e5a97.f491b",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1320,
        "y": 1500,
        "wires": [
            [
                "8228371e.8b4288",
                "c6daab76.cf51c8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "95a19c1d.39bae",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 1540,
        "wires": []
    },
    {
        "id": "af44b4f3.4b59e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 1500,
        "wires": [
            [
                "48cf55ef.7a86ec"
            ]
        ]
    },
    {
        "id": "48cf55ef.7a86ec",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.status = JSON.parse(gb);\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 1500,
        "wires": [
            [
                "a911e390.b5d95"
            ]
        ]
    },
    {
        "id": "e34a5b68.726ec8",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "1d363e0d.ecfda2",
            "12ffe7f.e8dc818",
            "5c79e5db.ac8dbc",
            "e7a3546e.921a88",
            "95441edd.0d929",
            "6754e914.7614e8",
            "ddabea75.dd1088",
            "753a36de.b9e428",
            "e8c8331e.e7793",
            "b8ba1292.37024"
        ],
        "x": 2295,
        "y": 1200,
        "wires": [
            [
                "9f82a757.25f3d"
            ]
        ]
    },
    {
        "id": "9cbb75e6.0f4498",
        "type": "http in",
        "z": "5df15275.2888ec",
        "name": "",
        "url": "/botslist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2310,
        "y": 580,
        "wires": [
            [
                "d2e4b8ad.2f61c8"
            ]
        ]
    },
    {
        "id": "6f87fcb7.9335e4",
        "type": "http response",
        "z": "5df15275.2888ec",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3080,
        "y": 580,
        "wires": []
    },
    {
        "id": "b7739a3.fc89468",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3480,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e4b8ad.2f61c8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2480,
        "y": 580,
        "wires": [
            [
                "80d7c6d0.cd5e08"
            ]
        ]
    },
    {
        "id": "f0503628.d8df98",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "let guid = global.get('guid');\nmsg.payload = [true, msg.payload, 0, 0, 0, 0, 0, 0, guid];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 580,
        "wires": [
            [
                "712f8721.08ce18"
            ]
        ]
    },
    {
        "id": "80d7c6d0.cd5e08",
        "type": "split",
        "z": "5df15275.2888ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2630,
        "y": 580,
        "wires": [
            [
                "f0503628.d8df98"
            ]
        ]
    },
    {
        "id": "712f8721.08ce18",
        "type": "join",
        "z": "5df15275.2888ec",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2930,
        "y": 580,
        "wires": [
            [
                "6f87fcb7.9335e4"
            ]
        ]
    },
    {
        "id": "1a05e8c0.3a30d7",
        "type": "http in",
        "z": "5df15275.2888ec",
        "name": "",
        "url": "/bot_status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2320,
        "y": 660,
        "wires": [
            [
                "192054d1.4fe29b"
            ]
        ]
    },
    {
        "id": "239253ed.cd5e7c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_status",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2720,
        "y": 660,
        "wires": [
            [
                "c94a0180.3474a"
            ]
        ]
    },
    {
        "id": "13685612.fa676a",
        "type": "http response",
        "z": "5df15275.2888ec",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3260,
        "y": 660,
        "wires": []
    },
    {
        "id": "e1f1b119.0f2f1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "msg.topic = \"d3fmoh2rVoVNgIcpLTFZBE0jHnI2-bots\";\nmsgp.payload= [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3700,
        "y": 1340,
        "wires": [
            [
                "d577802f.1b12c"
            ]
        ]
    },
    {
        "id": "d577802f.1b12c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3880,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "98f37d3.dcbc68",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3460,
        "y": 1340,
        "wires": [
            [
                "e1f1b119.0f2f1"
            ]
        ]
    },
    {
        "id": "192054d1.4fe29b",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.payload.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2520,
        "y": 660,
        "wires": [
            [
                "239253ed.cd5e7c",
                "d490c764.037958"
            ]
        ]
    },
    {
        "id": "4c5eb819.338738",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare data",
        "func": "msg.payload = msg.bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3090,
        "y": 660,
        "wires": [
            [
                "13685612.fa676a"
            ]
        ]
    },
    {
        "id": "d490c764.037958",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 700,
        "wires": []
    },
    {
        "id": "9d4b21de.c6e79",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "1 - Покупаем",
        "info": "",
        "x": 1030,
        "y": 2060,
        "wires": []
    },
    {
        "id": "29bba474.1311bc",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 1060,
        "y": 2520,
        "wires": []
    },
    {
        "id": "164e36c.27147c9",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "3 - Продаём",
        "info": "",
        "x": 1030,
        "y": 2660,
        "wires": []
    },
    {
        "id": "59e2c8e3.215458",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1038.5714569091797,
        "y": 2844.285919189453,
        "wires": [
            []
        ]
    },
    {
        "id": "2d408eec.5fd1d2",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "4 - Продали",
        "info": "",
        "x": 1030,
        "y": 2800,
        "wires": []
    },
    {
        "id": "91ce6bcb.4660c8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 538.5714569091797,
        "y": 2124.285919189453,
        "wires": [
            [
                "874dc0e1.0d03f",
                "c1205a7a.e64a88"
            ],
            [
                "2a9b22cf.0a526e",
                "f9171818.a77228",
                "1499a367.f9f57d"
            ],
            [
                "d7f4906a.c1a83",
                "b8ba1292.37024"
            ],
            [],
            [
                "59e2c8e3.215458"
            ]
        ]
    },
    {
        "id": "b90cf80b.4b7998",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "определяем этаж",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\n    var curfloor = f.filter(function(floor) {\n     return ((floor[1]<=lp)&&(floor[2]>lp));\n    });\n\nif (curfloor[0]) {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n   \n   \n    msg.bot.currentfloor = curfloor[0];\n    return [msg, null];\n} \nelse\n{\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-outgrid\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"blue\",shape:\"dot\"});\n   // node.warn(\"вне сетки\"); \n    return [null,msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 210,
        "y": 2120,
        "wires": [
            [
                "91ce6bcb.4660c8",
                "dc892fe8.bac79"
            ],
            []
        ]
    },
    {
        "id": "dc892fe8.bac79",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 328.5714569091797,
        "y": 2084.285919189453,
        "wires": []
    },
    {
        "id": "4fd5ae55.50c0d",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "вне сетки",
        "info": "",
        "x": 320,
        "y": 2180,
        "wires": []
    },
    {
        "id": "d0445e86.60e8a",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "дежурный по этажу",
        "info": "",
        "x": 260,
        "y": 2020,
        "wires": []
    },
    {
        "id": "c3c68186.76c01",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_data = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":data\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_data', getbot_data);",
        "finalize": "",
        "x": 290,
        "y": 600,
        "wires": [
            [
                "bcbb540b.558ae8"
            ]
        ]
    },
    {
        "id": "229ee0ff.22e48",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "c3c68186.76c01"
            ]
        ]
    },
    {
        "id": "e47a380a.5fd968",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "fe0a5fc8.c442f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "getbot_start_set",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_start_set')(botname);\n\ngb.then(gb => {\n\n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3780,
        "y": 140,
        "wires": [
            [
                "ac588a65.521198"
            ]
        ]
    },
    {
        "id": "bcbb540b.558ae8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 470,
        "y": 600,
        "wires": [
            [
                "e47a380a.5fd968"
            ]
        ]
    },
    {
        "id": "8228371e.8b4288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_data",
        "func": "\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1510,
        "y": 1500,
        "wires": [
            [
                "f46e3c05.ef292",
                "14ffa955.ed6edf"
            ]
        ]
    },
    {
        "id": "f46e3c05.ef292",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1600,
        "wires": []
    },
    {
        "id": "373cb204.5f5efe",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "14ffa955.ed6edf"
        ],
        "x": 75,
        "y": 2120,
        "wires": [
            [
                "be39e216.8776b",
                "b90cf80b.4b7998"
            ]
        ]
    },
    {
        "id": "be39e216.8776b",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 150,
        "y": 2260,
        "wires": []
    },
    {
        "id": "874dc0e1.0d03f",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1900,
        "wires": []
    },
    {
        "id": "2a9b22cf.0a526e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1499a367.f9f57d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 2120,
        "wires": []
    },
    {
        "id": "5984f0cf.b357d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1860,
        "wires": []
    },
    {
        "id": "c1205a7a.e64a88",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 1800,
        "wires": [
            [
                "498e9341.48da0c"
            ],
            [
                "1d363e0d.ecfda2",
                "5984f0cf.b357d",
                "915da6cf.825428"
            ]
        ]
    },
    {
        "id": "a0d89c52.2ec2b",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "запрещено закупать",
        "info": "",
        "x": 1420,
        "y": 1860,
        "wires": []
    },
    {
        "id": "498e9341.48da0c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set buy order",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\nnode.warn(quantity);\n\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": err\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        \n            //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1800,
        "wires": [
            [
                "f7313a3c.d751e8"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "f7313a3c.d751e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: currentfloor[0]});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1540,
        "y": 1800,
        "wires": [
            [
                "9d4abf3.e4d354",
                "3c3da305.c86c8c"
            ]
        ]
    },
    {
        "id": "3c3da305.c86c8c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1790,
        "y": 1800,
        "wires": [
            [
                "412c78d9.2e1a78",
                "12ffe7f.e8dc818"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "9f8d28a0.682b28",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 2090,
        "y": 1840,
        "wires": []
    },
    {
        "id": "d46ce170.d1325",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "0 - Свободно",
        "info": "",
        "x": 991.4285430908203,
        "y": 1755.7140808105469,
        "wires": []
    },
    {
        "id": "24cf66df.38462a",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2570,
        "y": 2640,
        "wires": []
    },
    {
        "id": "9d4abf3.e4d354",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1710,
        "y": 1700,
        "wires": []
    },
    {
        "id": "412c78d9.2e1a78",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1760,
        "wires": []
    },
    {
        "id": "12ffe7f.e8dc818",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1915,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1d363e0d.ecfda2",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1275,
        "y": 1860,
        "wires": []
    },
    {
        "id": "302b86fd.feef2a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "MA zapret calculate",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big)&&(msg.bot.status.currentprice > msg.bot.status.sr_ma_small)){\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n}\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1500,
        "wires": [
            [
                "e44e5a97.f491b"
            ]
        ]
    },
    {
        "id": "6115d0a9.4e59f",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet setbot_data = function (volname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = volname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_data', setbot_data);",
        "finalize": "",
        "x": 1070,
        "y": 600,
        "wires": [
            [
                "1fd9091b.b7c747"
            ]
        ]
    },
    {
        "id": "695f8ecb.2536a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 600,
        "wires": [
            [
                "6115d0a9.4e59f"
            ]
        ]
    },
    {
        "id": "63dd941.f161b6c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 600,
        "wires": []
    },
    {
        "id": "1fd9091b.b7c747",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1250,
        "y": 600,
        "wires": [
            [
                "63dd941.f161b6c"
            ]
        ]
    },
    {
        "id": "c94a0180.3474a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_data",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 660,
        "wires": [
            [
                "4c5eb819.338738"
            ]
        ]
    },
    {
        "id": "5c79e5db.ac8dbc",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1295,
        "y": 2000,
        "wires": []
    },
    {
        "id": "7ddb53c7.3bb5bc",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "msg.topic = \"jurnal\";\nmsg.payload = flow.get(\"track\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3500,
        "y": 1580,
        "wires": [
            [
                "5ec57567.e09b8c"
            ]
        ]
    },
    {
        "id": "8eb1f45.b108d08",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3790,
        "y": 1900,
        "wires": []
    },
    {
        "id": "f01cd92b.fcdc68",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "\"jurnal\"",
        "x": 3310,
        "y": 1880,
        "wires": [
            [
                "8b8766ab.625aa8",
                "1dd9dcaa.3f7493"
            ]
        ]
    },
    {
        "id": "f2127320.046ec",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3670,
        "y": 1820,
        "wires": [
            [
                "8eb1f45.b108d08"
            ]
        ]
    },
    {
        "id": "4b069157.19693",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3690,
        "y": 1520,
        "wires": [
            [
                "907c34e5.1e9808"
            ]
        ]
    },
    {
        "id": "5ec57567.e09b8c",
        "type": "join",
        "z": "5df15275.2888ec",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3640,
        "y": 1440,
        "wires": [
            [
                "4b069157.19693"
            ]
        ]
    },
    {
        "id": "907c34e5.1e9808",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 1580,
        "wires": []
    },
    {
        "id": "8b8766ab.625aa8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare getprice",
        "func": "\nmsg.topic = [];\nmsg.payload = \"jurnal\";\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3460,
        "y": 1820,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "601248c1.6a3f58",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.topic",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3540,
        "y": 1720,
        "wires": [
            [
                "6771d2a6.edcd3c"
            ]
        ]
    },
    {
        "id": "6771d2a6.edcd3c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3710,
        "y": 1720,
        "wires": []
    },
    {
        "id": "b6ece763.681068",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jurnal",
        "x": 3470,
        "y": 1740,
        "wires": [
            [
                "601248c1.6a3f58"
            ]
        ]
    },
    {
        "id": "1dd9dcaa.3f7493",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3550,
        "y": 1880,
        "wires": [
            [
                "f2127320.046ec"
            ]
        ]
    },
    {
        "id": "8a90f52f.5e82b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2540,
        "y": 520,
        "wires": [
            [
                "b9301109.6d837"
            ]
        ]
    },
    {
        "id": "b9301109.6d837",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2770,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1da56dc9.817ee2",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_start_set()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_start_set = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":start_set\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_start_set', getbot_start_set);",
        "finalize": "",
        "x": 310,
        "y": 680,
        "wires": [
            [
                "c83cd378.b93ca"
            ]
        ]
    },
    {
        "id": "4af43326.f9b1bc",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "1da56dc9.817ee2"
            ]
        ]
    },
    {
        "id": "3e8866d4.739e9a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 680,
        "wires": []
    },
    {
        "id": "c83cd378.b93ca",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot starts_set",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 530,
        "y": 680,
        "wires": [
            [
                "3e8866d4.739e9a"
            ]
        ]
    },
    {
        "id": "50d2f56d.d89b5c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "24e3759c.ccab7a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":data\";\n\nlet botdata = {\n    \"finance\":JSON.stringify(msg.payload.finance),\n    \"floors\":JSON.stringify(msg.payload.floors),\n    \"sales\":JSON.stringify(msg.payload.sales)\n    \n};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3820,
        "y": 200,
        "wires": [
            [
                "50d2f56d.d89b5c"
            ]
        ]
    },
    {
        "id": "493967b2.355f88",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.payload.status);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3810,
        "y": 260,
        "wires": [
            [
                "a77ec084.8fffe"
            ]
        ]
    },
    {
        "id": "a77ec084.8fffe",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4030,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "81b674e0.619348",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":settings\";\n\nmsg.payload = JSON.stringify(msg.payload.settings);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3820,
        "y": 320,
        "wires": [
            [
                "c192b5ce.f292e8"
            ]
        ]
    },
    {
        "id": "c192b5ce.f292e8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4050,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e48d6b.8af42",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.payload.ttp);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3800,
        "y": 380,
        "wires": [
            [
                "9c3f6550.f65078"
            ]
        ]
    },
    {
        "id": "9c3f6550.f65078",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4010,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "534028b7.335048",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":busy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3810,
        "y": 440,
        "wires": [
            [
                "d3e6b44f.196458"
            ]
        ]
    },
    {
        "id": "d3e6b44f.196458",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4030,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ac588a65.521198",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3950,
        "y": 140,
        "wires": [
            [
                "24e3759c.ccab7a",
                "493967b2.355f88",
                "81b674e0.619348",
                "f5e48d6b.8af42",
                "534028b7.335048"
            ]
        ]
    },
    {
        "id": "496429d7.3e65b8",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "url": "/bot_reset",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 3560,
        "y": 140,
        "wires": [
            [
                "daa3ab85.3e3f08",
                "fe0a5fc8.c442f"
            ]
        ]
    },
    {
        "id": "cd52017c.52e2d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 2440,
        "wires": []
    },
    {
        "id": "daa3ab85.3e3f08",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3580,
        "y": 200,
        "wires": []
    },
    {
        "id": "839251af.05aeb",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ALPHAUSDT-1606225644",
        "payloadType": "str",
        "x": 3610,
        "y": 80,
        "wires": [
            [
                "fe0a5fc8.c442f"
            ]
        ]
    },
    {
        "id": "f9171818.a77228",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 2100,
        "wires": [
            [
                "b55cd864.198818"
            ],
            [
                "9495114e.60fe3"
            ]
        ]
    },
    {
        "id": "15919274.ee07ae",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2180,
        "wires": []
    },
    {
        "id": "c6daab76.cf51c8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1620,
        "wires": []
    },
    {
        "id": "599bb04c.9368d",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2920,
        "y": 2460,
        "wires": [
            [
                "bf24a032.0ec52",
                "a135ebf2.c63d48"
            ]
        ]
    },
    {
        "id": "bf24a032.0ec52",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3110,
        "y": 2360,
        "wires": []
    },
    {
        "id": "7a67833a.3758dc",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "cansel buy orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.currentfloor[8];\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n    node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    node.send(msg);\n        \n    }\n    //node.status({}); //clear status message\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2670,
        "y": 2380,
        "wires": [
            [
                "599bb04c.9368d"
            ]
        ]
    },
    {
        "id": "acc188d3.58d138",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 2490,
        "y": 2400,
        "wires": []
    },
    {
        "id": "ef979c72.74622",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2180,
        "y": 2520,
        "wires": [
            [
                "7a67833a.3758dc"
            ],
            [
                "e8c8331e.e7793"
            ],
            [
                "599bb04c.9368d"
            ],
            [
                "509e478f.306ba8"
            ],
            [
                "82e76eec.4698f"
            ],
            [
                "82e76eec.4698f"
            ],
            [
                "82e76eec.4698f"
            ]
        ]
    },
    {
        "id": "9495114e.60fe3",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.currentfloor[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1670,
        "y": 2520,
        "wires": [
            [
                "ad7fdd13.f562b"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ad7fdd13.f562b",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1980,
        "y": 2520,
        "wires": [
            [
                "ef979c72.74622"
            ]
        ]
    },
    {
        "id": "e7a3546e.921a88",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 3335,
        "y": 2460,
        "wires": []
    },
    {
        "id": "a135ebf2.c63d48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: error});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3170,
        "y": 2460,
        "wires": [
            [
                "e7a3546e.921a88"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "82e76eec.4698f",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 2720,
        "wires": []
    },
    {
        "id": "915da6cf.825428",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1430,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "d7f4906a.c1a83",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2640,
        "wires": []
    },
    {
        "id": "5f69a953.e18b28",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "FILLED",
        "info": "",
        "x": 2490,
        "y": 2560,
        "wires": []
    },
    {
        "id": "bc089647.c26d98",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "CANCELED",
        "info": "",
        "x": 2510,
        "y": 2480,
        "wires": []
    },
    {
        "id": "509e478f.306ba8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2680,
        "y": 2580,
        "wires": [
            [
                "57e6a67e.1f8ae8"
            ]
        ]
    },
    {
        "id": "57e6a67e.1f8ae8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2950,
        "y": 2580,
        "wires": [
            [
                "95441edd.0d929"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "95441edd.0d929",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 3115,
        "y": 2580,
        "wires": []
    },
    {
        "id": "b603cdb8.70c35",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2820,
        "y": 2020,
        "wires": [
            [
                "b5f4a836.a7afe8",
                "1ff82a47.746756"
            ]
        ]
    },
    {
        "id": "b5f4a836.a7afe8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3010,
        "y": 1920,
        "wires": []
    },
    {
        "id": "2eb7dc6.f57b024",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 2390,
        "y": 1960,
        "wires": []
    },
    {
        "id": "865095a3.2a59f8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2080,
        "y": 2080,
        "wires": [
            [
                "753a36de.b9e428"
            ],
            [
                "753a36de.b9e428"
            ],
            [
                "b603cdb8.70c35"
            ],
            [
                "a488d768.190e48"
            ],
            [
                "509b2051.1f238"
            ],
            [
                "509b2051.1f238"
            ],
            [
                "509b2051.1f238"
            ]
        ]
    },
    {
        "id": "b55cd864.198818",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.currentfloor[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1570,
        "y": 2080,
        "wires": [
            [
                "5be6f2d2.79667c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "5be6f2d2.79667c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1880,
        "y": 2080,
        "wires": [
            [
                "865095a3.2a59f8"
            ]
        ]
    },
    {
        "id": "6754e914.7614e8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 3235,
        "y": 2020,
        "wires": []
    },
    {
        "id": "1ff82a47.746756",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3070,
        "y": 2020,
        "wires": [
            [
                "6754e914.7614e8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "509b2051.1f238",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2240,
        "wires": []
    },
    {
        "id": "b2c855fb.a42838",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "FILLED",
        "info": "",
        "x": 2390,
        "y": 2120,
        "wires": []
    },
    {
        "id": "a59e428f.f4ee",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "CANCELED",
        "info": "",
        "x": 2410,
        "y": 2040,
        "wires": []
    },
    {
        "id": "a488d768.190e48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2580,
        "y": 2140,
        "wires": [
            [
                "43fe1086.8d0d8"
            ]
        ]
    },
    {
        "id": "43fe1086.8d0d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2850,
        "y": 2140,
        "wires": [
            [
                "ddabea75.dd1088"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ddabea75.dd1088",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 3015,
        "y": 2140,
        "wires": []
    },
    {
        "id": "753a36de.b9e428",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 2315,
        "y": 1960,
        "wires": []
    },
    {
        "id": "e8c8331e.e7793",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 2455,
        "y": 2640,
        "wires": []
    },
    {
        "id": "adadc5c1.82cee8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2550,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b8ba1292.37024",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1295,
        "y": 2680,
        "wires": []
    }
]